/* 
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace AmazonSharp.Models.FulfillmentOutbound
{
    /// <summary>
    /// The time range within which a Scheduled Delivery fulfillment order should be delivered.
    /// </summary>
    [DataContract]
    public partial class DeliveryWindow : IEquatable<DeliveryWindow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryWindow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeliveryWindow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryWindow" /> class.
        /// </summary>
        /// <param name="StartDateTime">The date and time of the start of the Scheduled Delivery window, in ISO 8601 date time format. (required).</param>
        /// <param name="EndDateTime">The date and time of the end of the Scheduled Delivery window, in ISO 8601 date time format. (required).</param>
        public DeliveryWindow(Timestamp StartDateTime = default(Timestamp), Timestamp EndDateTime = default(Timestamp))
        {
            // to ensure "StartDateTime" is required (not null)
            if (StartDateTime == null)
            {
                throw new InvalidDataException("StartDateTime is a required property for DeliveryWindow and cannot be null");
            }
            else
            {
                this.StartDateTime = StartDateTime;
            }
            // to ensure "EndDateTime" is required (not null)
            if (EndDateTime == null)
            {
                throw new InvalidDataException("EndDateTime is a required property for DeliveryWindow and cannot be null");
            }
            else
            {
                this.EndDateTime = EndDateTime;
            }
        }

        /// <summary>
        /// The date and time of the start of the Scheduled Delivery window, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time of the start of the Scheduled Delivery window, in ISO 8601 date time format.</value>
        [DataMember(Name = "StartDateTime", EmitDefaultValue = false)]
        public Timestamp StartDateTime { get; set; }

        /// <summary>
        /// The date and time of the end of the Scheduled Delivery window, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time of the end of the Scheduled Delivery window, in ISO 8601 date time format.</value>
        [DataMember(Name = "EndDateTime", EmitDefaultValue = false)]
        public Timestamp EndDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliveryWindow {\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryWindow);
        }

        /// <summary>
        /// Returns true if DeliveryWindow instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryWindow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryWindow input)
        {
            if (input == null)
                return false;

            return
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) &&
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
