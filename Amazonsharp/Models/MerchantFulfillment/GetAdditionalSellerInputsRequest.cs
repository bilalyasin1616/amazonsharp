/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace AmazonSharp.Models.MerchantFulfillment
{
    /// <summary>
    /// Request schema.
    /// </summary>
    [DataContract]
    public partial class GetAdditionalSellerInputsRequest : IEquatable<GetAdditionalSellerInputsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAdditionalSellerInputsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAdditionalSellerInputsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAdditionalSellerInputsRequest" /> class.
        /// </summary>
        /// <param name="ShippingServiceId">ShippingServiceId (required).</param>
        /// <param name="ShipFromAddress">The address from which to ship. (required).</param>
        /// <param name="OrderId">An Amazon defined order identifier (required).</param>
        public GetAdditionalSellerInputsRequest(ShippingServiceIdentifier ShippingServiceId = default(ShippingServiceIdentifier), Address ShipFromAddress = default(Address), AmazonOrderId OrderId = default(AmazonOrderId))
        {
            // to ensure "ShippingServiceId" is required (not null)
            if (ShippingServiceId == null)
            {
                throw new InvalidDataException("ShippingServiceId is a required property for GetAdditionalSellerInputsRequest and cannot be null");
            }
            else
            {
                this.ShippingServiceId = ShippingServiceId;
            }
            // to ensure "ShipFromAddress" is required (not null)
            if (ShipFromAddress == null)
            {
                throw new InvalidDataException("ShipFromAddress is a required property for GetAdditionalSellerInputsRequest and cannot be null");
            }
            else
            {
                this.ShipFromAddress = ShipFromAddress;
            }
            // to ensure "OrderId" is required (not null)
            if (OrderId == null)
            {
                throw new InvalidDataException("OrderId is a required property for GetAdditionalSellerInputsRequest and cannot be null");
            }
            else
            {
                this.OrderId = OrderId;
            }
        }

        /// <summary>
        /// Gets or Sets ShippingServiceId
        /// </summary>
        [DataMember(Name = "ShippingServiceId", EmitDefaultValue = false)]
        public ShippingServiceIdentifier ShippingServiceId { get; set; }

        /// <summary>
        /// The address from which to ship.
        /// </summary>
        /// <value>The address from which to ship.</value>
        [DataMember(Name = "ShipFromAddress", EmitDefaultValue = false)]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        /// An Amazon defined order identifier
        /// </summary>
        /// <value>An Amazon defined order identifier</value>
        [DataMember(Name = "OrderId", EmitDefaultValue = false)]
        public AmazonOrderId OrderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAdditionalSellerInputsRequest {\n");
            sb.Append("  ShippingServiceId: ").Append(ShippingServiceId).Append("\n");
            sb.Append("  ShipFromAddress: ").Append(ShipFromAddress).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAdditionalSellerInputsRequest);
        }

        /// <summary>
        /// Returns true if GetAdditionalSellerInputsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAdditionalSellerInputsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAdditionalSellerInputsRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ShippingServiceId == input.ShippingServiceId ||
                    (this.ShippingServiceId != null &&
                    this.ShippingServiceId.Equals(input.ShippingServiceId))
                ) &&
                (
                    this.ShipFromAddress == input.ShipFromAddress ||
                    (this.ShipFromAddress != null &&
                    this.ShipFromAddress.Equals(input.ShipFromAddress))
                ) &&
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShippingServiceId != null)
                    hashCode = hashCode * 59 + this.ShippingServiceId.GetHashCode();
                if (this.ShipFromAddress != null)
                    hashCode = hashCode * 59 + this.ShipFromAddress.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
