/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace AmazonSharp.Models.MerchantFulfillment
{
    /// <summary>
    /// Shipment information required for requesting shipping service offers or for creating a shipment.
    /// </summary>
    [DataContract]
    public partial class ShipmentRequestDetails : IEquatable<ShipmentRequestDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentRequestDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentRequestDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentRequestDetails" /> class.
        /// </summary>
        /// <param name="AmazonOrderId">An Amazon-defined order identifier in 3-7-7 format. (required).</param>
        /// <param name="SellerOrderId">A seller-defined order identifier..</param>
        /// <param name="ItemList">ItemList (required).</param>
        /// <param name="ShipFromAddress">The address of the sender. (required).</param>
        /// <param name="PackageDimensions">The package dimensions. (required).</param>
        /// <param name="Weight">The package weight. (required).</param>
        /// <param name="MustArriveByDate">The date by which the package must arrive to keep the promise to the customer, in ISO 8601 datetime format. If MustArriveByDate is specified, only shipping service offers that can be delivered by that date are returned..</param>
        /// <param name="ShipDate">When used in a request, this is the date and time that the seller wants to ship the package. When used in a response, this is the date and time that the package can be shipped by the indicated method..</param>
        /// <param name="ShippingServiceOptions">Extra services offered by the carrier. (required).</param>
        /// <param name="LabelCustomization">Label customization options..</param>
        public ShipmentRequestDetails(AmazonOrderId AmazonOrderId = default(AmazonOrderId), SellerOrderId SellerOrderId = default(SellerOrderId), ItemList ItemList = default(ItemList), Address ShipFromAddress = default(Address), PackageDimensions PackageDimensions = default(PackageDimensions), Weight Weight = default(Weight), Timestamp MustArriveByDate = default(Timestamp), Timestamp ShipDate = default(Timestamp), ShippingServiceOptions ShippingServiceOptions = default(ShippingServiceOptions), LabelCustomization LabelCustomization = default(LabelCustomization))
        {
            // to ensure "AmazonOrderId" is required (not null)
            if (AmazonOrderId == null)
            {
                throw new InvalidDataException("AmazonOrderId is a required property for ShipmentRequestDetails and cannot be null");
            }
            else
            {
                this.AmazonOrderId = AmazonOrderId;
            }
            // to ensure "ItemList" is required (not null)
            if (ItemList == null)
            {
                throw new InvalidDataException("ItemList is a required property for ShipmentRequestDetails and cannot be null");
            }
            else
            {
                this.ItemList = ItemList;
            }
            // to ensure "ShipFromAddress" is required (not null)
            if (ShipFromAddress == null)
            {
                throw new InvalidDataException("ShipFromAddress is a required property for ShipmentRequestDetails and cannot be null");
            }
            else
            {
                this.ShipFromAddress = ShipFromAddress;
            }
            // to ensure "PackageDimensions" is required (not null)
            if (PackageDimensions == null)
            {
                throw new InvalidDataException("PackageDimensions is a required property for ShipmentRequestDetails and cannot be null");
            }
            else
            {
                this.PackageDimensions = PackageDimensions;
            }
            // to ensure "Weight" is required (not null)
            if (Weight == null)
            {
                throw new InvalidDataException("Weight is a required property for ShipmentRequestDetails and cannot be null");
            }
            else
            {
                this.Weight = Weight;
            }
            // to ensure "ShippingServiceOptions" is required (not null)
            if (ShippingServiceOptions == null)
            {
                throw new InvalidDataException("ShippingServiceOptions is a required property for ShipmentRequestDetails and cannot be null");
            }
            else
            {
                this.ShippingServiceOptions = ShippingServiceOptions;
            }
            this.SellerOrderId = SellerOrderId;
            this.MustArriveByDate = MustArriveByDate;
            this.ShipDate = ShipDate;
            this.LabelCustomization = LabelCustomization;
        }

        /// <summary>
        /// An Amazon-defined order identifier in 3-7-7 format.
        /// </summary>
        /// <value>An Amazon-defined order identifier in 3-7-7 format.</value>
        [DataMember(Name = "AmazonOrderId", EmitDefaultValue = false)]
        public AmazonOrderId AmazonOrderId { get; set; }

        /// <summary>
        /// A seller-defined order identifier.
        /// </summary>
        /// <value>A seller-defined order identifier.</value>
        [DataMember(Name = "SellerOrderId", EmitDefaultValue = false)]
        public SellerOrderId SellerOrderId { get; set; }

        /// <summary>
        /// Gets or Sets ItemList
        /// </summary>
        [DataMember(Name = "ItemList", EmitDefaultValue = false)]
        public ItemList ItemList { get; set; }

        /// <summary>
        /// The address of the sender.
        /// </summary>
        /// <value>The address of the sender.</value>
        [DataMember(Name = "ShipFromAddress", EmitDefaultValue = false)]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        /// The package dimensions.
        /// </summary>
        /// <value>The package dimensions.</value>
        [DataMember(Name = "PackageDimensions", EmitDefaultValue = false)]
        public PackageDimensions PackageDimensions { get; set; }

        /// <summary>
        /// The package weight.
        /// </summary>
        /// <value>The package weight.</value>
        [DataMember(Name = "Weight", EmitDefaultValue = false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// The date by which the package must arrive to keep the promise to the customer, in ISO 8601 datetime format. If MustArriveByDate is specified, only shipping service offers that can be delivered by that date are returned.
        /// </summary>
        /// <value>The date by which the package must arrive to keep the promise to the customer, in ISO 8601 datetime format. If MustArriveByDate is specified, only shipping service offers that can be delivered by that date are returned.</value>
        [DataMember(Name = "MustArriveByDate", EmitDefaultValue = false)]
        public Timestamp MustArriveByDate { get; set; }

        /// <summary>
        /// When used in a request, this is the date and time that the seller wants to ship the package. When used in a response, this is the date and time that the package can be shipped by the indicated method.
        /// </summary>
        /// <value>When used in a request, this is the date and time that the seller wants to ship the package. When used in a response, this is the date and time that the package can be shipped by the indicated method.</value>
        [DataMember(Name = "ShipDate", EmitDefaultValue = false)]
        public Timestamp ShipDate { get; set; }

        /// <summary>
        /// Extra services offered by the carrier.
        /// </summary>
        /// <value>Extra services offered by the carrier.</value>
        [DataMember(Name = "ShippingServiceOptions", EmitDefaultValue = false)]
        public ShippingServiceOptions ShippingServiceOptions { get; set; }

        /// <summary>
        /// Label customization options.
        /// </summary>
        /// <value>Label customization options.</value>
        [DataMember(Name = "LabelCustomization", EmitDefaultValue = false)]
        public LabelCustomization LabelCustomization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentRequestDetails {\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  SellerOrderId: ").Append(SellerOrderId).Append("\n");
            sb.Append("  ItemList: ").Append(ItemList).Append("\n");
            sb.Append("  ShipFromAddress: ").Append(ShipFromAddress).Append("\n");
            sb.Append("  PackageDimensions: ").Append(PackageDimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  MustArriveByDate: ").Append(MustArriveByDate).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  ShippingServiceOptions: ").Append(ShippingServiceOptions).Append("\n");
            sb.Append("  LabelCustomization: ").Append(LabelCustomization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentRequestDetails);
        }

        /// <summary>
        /// Returns true if ShipmentRequestDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentRequestDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentRequestDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AmazonOrderId == input.AmazonOrderId ||
                    (this.AmazonOrderId != null &&
                    this.AmazonOrderId.Equals(input.AmazonOrderId))
                ) &&
                (
                    this.SellerOrderId == input.SellerOrderId ||
                    (this.SellerOrderId != null &&
                    this.SellerOrderId.Equals(input.SellerOrderId))
                ) &&
                (
                    this.ItemList == input.ItemList ||
                    (this.ItemList != null &&
                    this.ItemList.Equals(input.ItemList))
                ) &&
                (
                    this.ShipFromAddress == input.ShipFromAddress ||
                    (this.ShipFromAddress != null &&
                    this.ShipFromAddress.Equals(input.ShipFromAddress))
                ) &&
                (
                    this.PackageDimensions == input.PackageDimensions ||
                    (this.PackageDimensions != null &&
                    this.PackageDimensions.Equals(input.PackageDimensions))
                ) &&
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) &&
                (
                    this.MustArriveByDate == input.MustArriveByDate ||
                    (this.MustArriveByDate != null &&
                    this.MustArriveByDate.Equals(input.MustArriveByDate))
                ) &&
                (
                    this.ShipDate == input.ShipDate ||
                    (this.ShipDate != null &&
                    this.ShipDate.Equals(input.ShipDate))
                ) &&
                (
                    this.ShippingServiceOptions == input.ShippingServiceOptions ||
                    (this.ShippingServiceOptions != null &&
                    this.ShippingServiceOptions.Equals(input.ShippingServiceOptions))
                ) &&
                (
                    this.LabelCustomization == input.LabelCustomization ||
                    (this.LabelCustomization != null &&
                    this.LabelCustomization.Equals(input.LabelCustomization))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmazonOrderId != null)
                    hashCode = hashCode * 59 + this.AmazonOrderId.GetHashCode();
                if (this.SellerOrderId != null)
                    hashCode = hashCode * 59 + this.SellerOrderId.GetHashCode();
                if (this.ItemList != null)
                    hashCode = hashCode * 59 + this.ItemList.GetHashCode();
                if (this.ShipFromAddress != null)
                    hashCode = hashCode * 59 + this.ShipFromAddress.GetHashCode();
                if (this.PackageDimensions != null)
                    hashCode = hashCode * 59 + this.PackageDimensions.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.MustArriveByDate != null)
                    hashCode = hashCode * 59 + this.MustArriveByDate.GetHashCode();
                if (this.ShipDate != null)
                    hashCode = hashCode * 59 + this.ShipDate.GetHashCode();
                if (this.ShippingServiceOptions != null)
                    hashCode = hashCode * 59 + this.ShippingServiceOptions.GetHashCode();
                if (this.LabelCustomization != null)
                    hashCode = hashCode * 59 + this.LabelCustomization.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
