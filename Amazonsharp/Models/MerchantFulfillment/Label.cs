/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace AmazonSharp.Models.MerchantFulfillment
{
    /// <summary>
    /// Data for creating a shipping label and dimensions for printing the label.
    /// </summary>
    [DataContract]
    public partial class Label : IEquatable<Label>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets LabelFormat
        /// </summary>
        [DataMember(Name = "LabelFormat", EmitDefaultValue = false)]
        public LabelFormat? LabelFormat { get; set; }
        /// <summary>
        /// Gets or Sets StandardIdForLabel
        /// </summary>
        [DataMember(Name = "StandardIdForLabel", EmitDefaultValue = false)]
        public StandardIdForLabel? StandardIdForLabel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Label" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Label() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Label" /> class.
        /// </summary>
        /// <param name="CustomTextForLabel">CustomTextForLabel.</param>
        /// <param name="Dimensions">Dimensions (required).</param>
        /// <param name="FileContents">FileContents (required).</param>
        /// <param name="LabelFormat">LabelFormat.</param>
        /// <param name="StandardIdForLabel">StandardIdForLabel.</param>
        public Label(CustomTextForLabel CustomTextForLabel = default(CustomTextForLabel), LabelDimensions Dimensions = default(LabelDimensions), FileContents FileContents = default(FileContents), LabelFormat? LabelFormat = default(LabelFormat?), StandardIdForLabel? StandardIdForLabel = default(StandardIdForLabel?))
        {
            // to ensure "Dimensions" is required (not null)
            if (Dimensions == null)
            {
                throw new InvalidDataException("Dimensions is a required property for Label and cannot be null");
            }
            else
            {
                this.Dimensions = Dimensions;
            }
            // to ensure "FileContents" is required (not null)
            if (FileContents == null)
            {
                throw new InvalidDataException("FileContents is a required property for Label and cannot be null");
            }
            else
            {
                this.FileContents = FileContents;
            }
            this.CustomTextForLabel = CustomTextForLabel;
            this.LabelFormat = LabelFormat;
            this.StandardIdForLabel = StandardIdForLabel;
        }

        /// <summary>
        /// Gets or Sets CustomTextForLabel
        /// </summary>
        [DataMember(Name = "CustomTextForLabel", EmitDefaultValue = false)]
        public CustomTextForLabel CustomTextForLabel { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "Dimensions", EmitDefaultValue = false)]
        public LabelDimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets FileContents
        /// </summary>
        [DataMember(Name = "FileContents", EmitDefaultValue = false)]
        public FileContents FileContents { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Label {\n");
            sb.Append("  CustomTextForLabel: ").Append(CustomTextForLabel).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  FileContents: ").Append(FileContents).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  StandardIdForLabel: ").Append(StandardIdForLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Label);
        }

        /// <summary>
        /// Returns true if Label instances are equal
        /// </summary>
        /// <param name="input">Instance of Label to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Label input)
        {
            if (input == null)
                return false;

            return
                (
                    this.CustomTextForLabel == input.CustomTextForLabel ||
                    (this.CustomTextForLabel != null &&
                    this.CustomTextForLabel.Equals(input.CustomTextForLabel))
                ) &&
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) &&
                (
                    this.FileContents == input.FileContents ||
                    (this.FileContents != null &&
                    this.FileContents.Equals(input.FileContents))
                ) &&
                (
                    this.LabelFormat == input.LabelFormat ||
                    (this.LabelFormat != null &&
                    this.LabelFormat.Equals(input.LabelFormat))
                ) &&
                (
                    this.StandardIdForLabel == input.StandardIdForLabel ||
                    (this.StandardIdForLabel != null &&
                    this.StandardIdForLabel.Equals(input.StandardIdForLabel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomTextForLabel != null)
                    hashCode = hashCode * 59 + this.CustomTextForLabel.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.FileContents != null)
                    hashCode = hashCode * 59 + this.FileContents.GetHashCode();
                if (this.LabelFormat != null)
                    hashCode = hashCode * 59 + this.LabelFormat.GetHashCode();
                if (this.StandardIdForLabel != null)
                    hashCode = hashCode * 59 + this.StandardIdForLabel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
