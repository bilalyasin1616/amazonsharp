/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace AmazonSharp.Models.MerchantFulfillment
{
    /// <summary>
    /// Request schema.
    /// </summary>
    [DataContract]
    public partial class CreateShipmentRequest : IEquatable<CreateShipmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Hazardous materials options for a package. Consult the terms and conditions for each carrier for more information about hazardous materials.
        /// </summary>
        /// <value>Hazardous materials options for a package. Consult the terms and conditions for each carrier for more information about hazardous materials.</value>
        [DataMember(Name = "HazmatType", EmitDefaultValue = false)]
        public HazmatType? HazmatType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShipmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateShipmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShipmentRequest" /> class.
        /// </summary>
        /// <param name="ShipmentRequestDetails">Shipment information required for creating a shipment. (required).</param>
        /// <param name="ShippingServiceId">ShippingServiceId (required).</param>
        /// <param name="ShippingServiceOfferId">Identifies a shipping service order made by a carrier..</param>
        /// <param name="HazmatType">Hazardous materials options for a package. Consult the terms and conditions for each carrier for more information about hazardous materials..</param>
        /// <param name="LabelFormatOption">LabelFormatOption.</param>
        /// <param name="ShipmentLevelSellerInputsList">A list of additional seller inputs required to ship this shipment..</param>
        public CreateShipmentRequest(ShipmentRequestDetails ShipmentRequestDetails = default(ShipmentRequestDetails), ShippingServiceIdentifier ShippingServiceId = default(ShippingServiceIdentifier), string ShippingServiceOfferId = default(string), HazmatType? HazmatType = default(HazmatType?), LabelFormatOptionRequest LabelFormatOption = default(LabelFormatOptionRequest), AdditionalSellerInputsList ShipmentLevelSellerInputsList = default(AdditionalSellerInputsList))
        {
            // to ensure "ShipmentRequestDetails" is required (not null)
            if (ShipmentRequestDetails == null)
            {
                throw new InvalidDataException("ShipmentRequestDetails is a required property for CreateShipmentRequest and cannot be null");
            }
            else
            {
                this.ShipmentRequestDetails = ShipmentRequestDetails;
            }
            // to ensure "ShippingServiceId" is required (not null)
            if (ShippingServiceId == null)
            {
                throw new InvalidDataException("ShippingServiceId is a required property for CreateShipmentRequest and cannot be null");
            }
            else
            {
                this.ShippingServiceId = ShippingServiceId;
            }
            this.ShippingServiceOfferId = ShippingServiceOfferId;
            this.HazmatType = HazmatType;
            this.LabelFormatOption = LabelFormatOption;
            this.ShipmentLevelSellerInputsList = ShipmentLevelSellerInputsList;
        }

        /// <summary>
        /// Shipment information required for creating a shipment.
        /// </summary>
        /// <value>Shipment information required for creating a shipment.</value>
        [DataMember(Name = "ShipmentRequestDetails", EmitDefaultValue = false)]
        public ShipmentRequestDetails ShipmentRequestDetails { get; set; }

        /// <summary>
        /// Gets or Sets ShippingServiceId
        /// </summary>
        [DataMember(Name = "ShippingServiceId", EmitDefaultValue = false)]
        public ShippingServiceIdentifier ShippingServiceId { get; set; }

        /// <summary>
        /// Identifies a shipping service order made by a carrier.
        /// </summary>
        /// <value>Identifies a shipping service order made by a carrier.</value>
        [DataMember(Name = "ShippingServiceOfferId", EmitDefaultValue = false)]
        public string ShippingServiceOfferId { get; set; }


        /// <summary>
        /// Gets or Sets LabelFormatOption
        /// </summary>
        [DataMember(Name = "LabelFormatOption", EmitDefaultValue = false)]
        public LabelFormatOptionRequest LabelFormatOption { get; set; }

        /// <summary>
        /// A list of additional seller inputs required to ship this shipment.
        /// </summary>
        /// <value>A list of additional seller inputs required to ship this shipment.</value>
        [DataMember(Name = "ShipmentLevelSellerInputsList", EmitDefaultValue = false)]
        public AdditionalSellerInputsList ShipmentLevelSellerInputsList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateShipmentRequest {\n");
            sb.Append("  ShipmentRequestDetails: ").Append(ShipmentRequestDetails).Append("\n");
            sb.Append("  ShippingServiceId: ").Append(ShippingServiceId).Append("\n");
            sb.Append("  ShippingServiceOfferId: ").Append(ShippingServiceOfferId).Append("\n");
            sb.Append("  HazmatType: ").Append(HazmatType).Append("\n");
            sb.Append("  LabelFormatOption: ").Append(LabelFormatOption).Append("\n");
            sb.Append("  ShipmentLevelSellerInputsList: ").Append(ShipmentLevelSellerInputsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateShipmentRequest);
        }

        /// <summary>
        /// Returns true if CreateShipmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateShipmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateShipmentRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ShipmentRequestDetails == input.ShipmentRequestDetails ||
                    (this.ShipmentRequestDetails != null &&
                    this.ShipmentRequestDetails.Equals(input.ShipmentRequestDetails))
                ) &&
                (
                    this.ShippingServiceId == input.ShippingServiceId ||
                    (this.ShippingServiceId != null &&
                    this.ShippingServiceId.Equals(input.ShippingServiceId))
                ) &&
                (
                    this.ShippingServiceOfferId == input.ShippingServiceOfferId ||
                    (this.ShippingServiceOfferId != null &&
                    this.ShippingServiceOfferId.Equals(input.ShippingServiceOfferId))
                ) &&
                (
                    this.HazmatType == input.HazmatType ||
                    (this.HazmatType != null &&
                    this.HazmatType.Equals(input.HazmatType))
                ) &&
                (
                    this.LabelFormatOption == input.LabelFormatOption ||
                    (this.LabelFormatOption != null &&
                    this.LabelFormatOption.Equals(input.LabelFormatOption))
                ) &&
                (
                    this.ShipmentLevelSellerInputsList == input.ShipmentLevelSellerInputsList ||
                    (this.ShipmentLevelSellerInputsList != null &&
                    this.ShipmentLevelSellerInputsList.Equals(input.ShipmentLevelSellerInputsList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipmentRequestDetails != null)
                    hashCode = hashCode * 59 + this.ShipmentRequestDetails.GetHashCode();
                if (this.ShippingServiceId != null)
                    hashCode = hashCode * 59 + this.ShippingServiceId.GetHashCode();
                if (this.ShippingServiceOfferId != null)
                    hashCode = hashCode * 59 + this.ShippingServiceOfferId.GetHashCode();
                if (this.HazmatType != null)
                    hashCode = hashCode * 59 + this.HazmatType.GetHashCode();
                if (this.LabelFormatOption != null)
                    hashCode = hashCode * 59 + this.LabelFormatOption.GetHashCode();
                if (this.ShipmentLevelSellerInputsList != null)
                    hashCode = hashCode * 59 + this.ShipmentLevelSellerInputsList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
