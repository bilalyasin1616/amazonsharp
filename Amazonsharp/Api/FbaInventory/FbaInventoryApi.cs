/* 
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AmazonSharp.Clients;
using AmazonSharp.Models.FbaInventory;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace AmazonSharp.Api.FbaInventory
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFbaInventoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime and sellerSkus parameters:  - All inventory summaries with available details are returned when the startDateTime and sellerSkus parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus parameter is ignored. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 90 | 150 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. (optional)</param>
        /// <returns>GetInventorySummariesResponse</returns>
        GetInventorySummariesResponse GetInventorySummaries(string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime and sellerSkus parameters:  - All inventory summaries with available details are returned when the startDateTime and sellerSkus parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus parameter is ignored. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 90 | 150 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of GetInventorySummariesResponse</returns>
        ApiResponse<GetInventorySummariesResponse> GetInventorySummariesWithHttpInfo(string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string nextToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime and sellerSkus parameters:  - All inventory summaries with available details are returned when the startDateTime and sellerSkus parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus parameter is ignored. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 90 | 150 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of GetInventorySummariesResponse</returns>
        System.Threading.Tasks.Task<GetInventorySummariesResponse> GetInventorySummariesAsync(string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime and sellerSkus parameters:  - All inventory summaries with available details are returned when the startDateTime and sellerSkus parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus parameter is ignored. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 90 | 150 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (GetInventorySummariesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInventorySummariesResponse>> GetInventorySummariesAsyncWithHttpInfo(string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string nextToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FbaInventoryApi : IFbaInventoryApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FbaInventoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FbaInventoryApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FbaInventoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FbaInventoryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime and sellerSkus parameters:  - All inventory summaries with available details are returned when the startDateTime and sellerSkus parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus parameter is ignored. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 90 | 150 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. (optional)</param>
        /// <returns>GetInventorySummariesResponse</returns>
        public GetInventorySummariesResponse GetInventorySummaries(string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string nextToken = null)
        {
            ApiResponse<GetInventorySummariesResponse> localVarResponse = GetInventorySummariesWithHttpInfo(granularityType, granularityId, marketplaceIds, details, startDateTime, sellerSkus, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime and sellerSkus parameters:  - All inventory summaries with available details are returned when the startDateTime and sellerSkus parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus parameter is ignored. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 90 | 150 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of GetInventorySummariesResponse</returns>
        public ApiResponse<GetInventorySummariesResponse> GetInventorySummariesWithHttpInfo(string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string nextToken = null)
        {
            // verify the required parameter 'granularityType' is set
            if (granularityType == null)
                throw new ApiException(400, "Missing required parameter 'granularityType' when calling FbaInventoryApi->GetInventorySummaries");
            // verify the required parameter 'granularityId' is set
            if (granularityId == null)
                throw new ApiException(400, "Missing required parameter 'granularityId' when calling FbaInventoryApi->GetInventorySummaries");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling FbaInventoryApi->GetInventorySummaries");

            var localVarPath = "/fba/inventory/v1/summaries";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (granularityType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "granularityType", granularityType)); // query parameter
            if (granularityId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "granularityId", granularityId)); // query parameter
            if (startDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startDateTime", startDateTime)); // query parameter
            if (sellerSkus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sellerSkus", sellerSkus)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventorySummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInventorySummariesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInventorySummariesResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInventorySummariesResponse)));
        }

        /// <summary>
        ///  Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime and sellerSkus parameters:  - All inventory summaries with available details are returned when the startDateTime and sellerSkus parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus parameter is ignored. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 90 | 150 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of GetInventorySummariesResponse</returns>
        public async System.Threading.Tasks.Task<GetInventorySummariesResponse> GetInventorySummariesAsync(string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string nextToken = null)
        {
            ApiResponse<GetInventorySummariesResponse> localVarResponse = await GetInventorySummariesAsyncWithHttpInfo(granularityType, granularityId, marketplaceIds, details, startDateTime, sellerSkus, nextToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the startDateTime and sellerSkus parameters:  - All inventory summaries with available details are returned when the startDateTime and sellerSkus parameters are omitted. - When startDateTime is provided, the operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus parameter is ignored. - When the sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 90 | 150 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularityType">The granularity type for the inventory aggregation level.</param>
        /// <param name="granularityId">The granularity ID for the inventory aggregation level.</param>
        /// <param name="marketplaceIds">The marketplace ID for the marketplace for which to return inventory summaries.</param>
        /// <param name="details">true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)</param>
        /// <param name="startDateTime">A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)</param>
        /// <param name="sellerSkus">A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)</param>
        /// <param name="nextToken">String token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (GetInventorySummariesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInventorySummariesResponse>> GetInventorySummariesAsyncWithHttpInfo(string granularityType, string granularityId, List<string> marketplaceIds, bool? details = null, DateTime? startDateTime = null, List<string> sellerSkus = null, string nextToken = null)
        {
            // verify the required parameter 'granularityType' is set
            if (granularityType == null)
                throw new ApiException(400, "Missing required parameter 'granularityType' when calling FbaInventoryApi->GetInventorySummaries");
            // verify the required parameter 'granularityId' is set
            if (granularityId == null)
                throw new ApiException(400, "Missing required parameter 'granularityId' when calling FbaInventoryApi->GetInventorySummaries");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling FbaInventoryApi->GetInventorySummaries");

            var localVarPath = "/fba/inventory/v1/summaries";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (granularityType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "granularityType", granularityType)); // query parameter
            if (granularityId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "granularityId", granularityId)); // query parameter
            if (startDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startDateTime", startDateTime)); // query parameter
            if (sellerSkus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sellerSkus", sellerSkus)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventorySummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInventorySummariesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInventorySummariesResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInventorySummariesResponse)));
        }

    }
}
