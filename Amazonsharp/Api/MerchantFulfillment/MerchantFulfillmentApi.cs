/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AmazonSharp.Clients;
using AmazonSharp.Models.MerchantFulfillment;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace AmazonSharp.Api.MerchantFulfillment
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMerchantFulfillmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>CancelShipmentResponse</returns>
        CancelShipmentResponse CancelShipment(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>ApiResponse of CancelShipmentResponse</returns>
        ApiResponse<CancelShipmentResponse> CancelShipmentWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>CancelShipmentResponse</returns>
        CancelShipmentResponse CancelShipmentOld(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>ApiResponse of CancelShipmentResponse</returns>
        ApiResponse<CancelShipmentResponse> CancelShipmentOldWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateShipmentResponse</returns>
        CreateShipmentResponse CreateShipment(CreateShipmentRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateShipmentResponse</returns>
        ApiResponse<CreateShipmentResponse> CreateShipmentWithHttpInfo(CreateShipmentRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetAdditionalSellerInputsResponse</returns>
        GetAdditionalSellerInputsResponse GetAdditionalSellerInputs(GetAdditionalSellerInputsRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetAdditionalSellerInputsResponse</returns>
        ApiResponse<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsWithHttpInfo(GetAdditionalSellerInputsRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetAdditionalSellerInputsResponse</returns>
        GetAdditionalSellerInputsResponse GetAdditionalSellerInputsOld(GetAdditionalSellerInputsRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetAdditionalSellerInputsResponse</returns>
        ApiResponse<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsOldWithHttpInfo(GetAdditionalSellerInputsRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetEligibleShipmentServicesResponse</returns>
        GetEligibleShipmentServicesResponse GetEligibleShipmentServices(GetEligibleShipmentServicesRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetEligibleShipmentServicesResponse</returns>
        ApiResponse<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesWithHttpInfo(GetEligibleShipmentServicesRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetEligibleShipmentServicesResponse</returns>
        GetEligibleShipmentServicesResponse GetEligibleShipmentServicesOld(GetEligibleShipmentServicesRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetEligibleShipmentServicesResponse</returns>
        ApiResponse<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesOldWithHttpInfo(GetEligibleShipmentServicesRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>GetShipmentResponse</returns>
        GetShipmentResponse GetShipment(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>ApiResponse of GetShipmentResponse</returns>
        ApiResponse<GetShipmentResponse> GetShipmentWithHttpInfo(string shipmentId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Task of CancelShipmentResponse</returns>
        System.Threading.Tasks.Task<CancelShipmentResponse> CancelShipmentAsync(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Task of ApiResponse (CancelShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelShipmentResponse>> CancelShipmentAsyncWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Task of CancelShipmentResponse</returns>
        System.Threading.Tasks.Task<CancelShipmentResponse> CancelShipmentOldAsync(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Task of ApiResponse (CancelShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelShipmentResponse>> CancelShipmentOldAsyncWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateShipmentResponse</returns>
        System.Threading.Tasks.Task<CreateShipmentResponse> CreateShipmentAsync(CreateShipmentRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateShipmentResponse>> CreateShipmentAsyncWithHttpInfo(CreateShipmentRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetAdditionalSellerInputsResponse</returns>
        System.Threading.Tasks.Task<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsAsync(GetAdditionalSellerInputsRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetAdditionalSellerInputsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAdditionalSellerInputsResponse>> GetAdditionalSellerInputsAsyncWithHttpInfo(GetAdditionalSellerInputsRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetAdditionalSellerInputsResponse</returns>
        System.Threading.Tasks.Task<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsOldAsync(GetAdditionalSellerInputsRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetAdditionalSellerInputsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAdditionalSellerInputsResponse>> GetAdditionalSellerInputsOldAsyncWithHttpInfo(GetAdditionalSellerInputsRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetEligibleShipmentServicesResponse</returns>
        System.Threading.Tasks.Task<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesAsync(GetEligibleShipmentServicesRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetEligibleShipmentServicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEligibleShipmentServicesResponse>> GetEligibleShipmentServicesAsyncWithHttpInfo(GetEligibleShipmentServicesRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetEligibleShipmentServicesResponse</returns>
        System.Threading.Tasks.Task<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesOldAsync(GetEligibleShipmentServicesRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetEligibleShipmentServicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEligibleShipmentServicesResponse>> GetEligibleShipmentServicesOldAsyncWithHttpInfo(GetEligibleShipmentServicesRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>Task of GetShipmentResponse</returns>
        System.Threading.Tasks.Task<GetShipmentResponse> GetShipmentAsync(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>Task of ApiResponse (GetShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipmentResponse>> GetShipmentAsyncWithHttpInfo(string shipmentId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MerchantFulfillmentApi : IMerchantFulfillmentApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantFulfillmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MerchantFulfillmentApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantFulfillmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MerchantFulfillmentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>CancelShipmentResponse</returns>
        public CancelShipmentResponse CancelShipment(string shipmentId)
        {
            ApiResponse<CancelShipmentResponse> localVarResponse = CancelShipmentWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>ApiResponse of CancelShipmentResponse</returns>
        public ApiResponse<CancelShipmentResponse> CancelShipmentWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling MerchantFulfillmentApi->CancelShipment");

            var localVarPath = "/mfn/v0/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelShipmentResponse)));
        }

        /// <summary>
        ///  Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Task of CancelShipmentResponse</returns>
        public async System.Threading.Tasks.Task<CancelShipmentResponse> CancelShipmentAsync(string shipmentId)
        {
            ApiResponse<CancelShipmentResponse> localVarResponse = await CancelShipmentAsyncWithHttpInfo(shipmentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Task of ApiResponse (CancelShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelShipmentResponse>> CancelShipmentAsyncWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling MerchantFulfillmentApi->CancelShipment");

            var localVarPath = "/mfn/v0/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelShipmentResponse)));
        }

        /// <summary>
        ///  Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>CancelShipmentResponse</returns>
        public CancelShipmentResponse CancelShipmentOld(string shipmentId)
        {
            ApiResponse<CancelShipmentResponse> localVarResponse = CancelShipmentOldWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>ApiResponse of CancelShipmentResponse</returns>
        public ApiResponse<CancelShipmentResponse> CancelShipmentOldWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling MerchantFulfillmentApi->CancelShipmentOld");

            var localVarPath = "/mfn/v0/shipments/{shipmentId}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelShipmentOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelShipmentResponse)));
        }

        /// <summary>
        ///  Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Task of CancelShipmentResponse</returns>
        public async System.Threading.Tasks.Task<CancelShipmentResponse> CancelShipmentOldAsync(string shipmentId)
        {
            ApiResponse<CancelShipmentResponse> localVarResponse = await CancelShipmentOldAsyncWithHttpInfo(shipmentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment to cancel.</param>
        /// <returns>Task of ApiResponse (CancelShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelShipmentResponse>> CancelShipmentOldAsyncWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling MerchantFulfillmentApi->CancelShipmentOld");

            var localVarPath = "/mfn/v0/shipments/{shipmentId}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelShipmentOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelShipmentResponse)));
        }

        /// <summary>
        ///  Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateShipmentResponse</returns>
        public CreateShipmentResponse CreateShipment(CreateShipmentRequest body)
        {
            ApiResponse<CreateShipmentResponse> localVarResponse = CreateShipmentWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateShipmentResponse</returns>
        public ApiResponse<CreateShipmentResponse> CreateShipmentWithHttpInfo(CreateShipmentRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MerchantFulfillmentApi->CreateShipment");

            var localVarPath = "/mfn/v0/shipments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateShipmentResponse)));
        }

        /// <summary>
        ///  Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateShipmentResponse</returns>
        public async System.Threading.Tasks.Task<CreateShipmentResponse> CreateShipmentAsync(CreateShipmentRequest body)
        {
            ApiResponse<CreateShipmentResponse> localVarResponse = await CreateShipmentAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateShipmentResponse>> CreateShipmentAsyncWithHttpInfo(CreateShipmentRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MerchantFulfillmentApi->CreateShipment");

            var localVarPath = "/mfn/v0/shipments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateShipmentResponse)));
        }

        /// <summary>
        ///  Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetAdditionalSellerInputsResponse</returns>
        public GetAdditionalSellerInputsResponse GetAdditionalSellerInputs(GetAdditionalSellerInputsRequest body)
        {
            ApiResponse<GetAdditionalSellerInputsResponse> localVarResponse = GetAdditionalSellerInputsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetAdditionalSellerInputsResponse</returns>
        public ApiResponse<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsWithHttpInfo(GetAdditionalSellerInputsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MerchantFulfillmentApi->GetAdditionalSellerInputs");

            var localVarPath = "/mfn/v0/additionalSellerInputs";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdditionalSellerInputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAdditionalSellerInputsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAdditionalSellerInputsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAdditionalSellerInputsResponse)));
        }

        /// <summary>
        ///  Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetAdditionalSellerInputsResponse</returns>
        public async System.Threading.Tasks.Task<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsAsync(GetAdditionalSellerInputsRequest body)
        {
            ApiResponse<GetAdditionalSellerInputsResponse> localVarResponse = await GetAdditionalSellerInputsAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetAdditionalSellerInputsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAdditionalSellerInputsResponse>> GetAdditionalSellerInputsAsyncWithHttpInfo(GetAdditionalSellerInputsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MerchantFulfillmentApi->GetAdditionalSellerInputs");

            var localVarPath = "/mfn/v0/additionalSellerInputs";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdditionalSellerInputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAdditionalSellerInputsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAdditionalSellerInputsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAdditionalSellerInputsResponse)));
        }

        /// <summary>
        ///  Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetAdditionalSellerInputsResponse</returns>
        public GetAdditionalSellerInputsResponse GetAdditionalSellerInputsOld(GetAdditionalSellerInputsRequest body)
        {
            ApiResponse<GetAdditionalSellerInputsResponse> localVarResponse = GetAdditionalSellerInputsOldWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetAdditionalSellerInputsResponse</returns>
        public ApiResponse<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsOldWithHttpInfo(GetAdditionalSellerInputsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MerchantFulfillmentApi->GetAdditionalSellerInputsOld");

            var localVarPath = "/mfn/v0/sellerInputs";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdditionalSellerInputsOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAdditionalSellerInputsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAdditionalSellerInputsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAdditionalSellerInputsResponse)));
        }

        /// <summary>
        ///  Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetAdditionalSellerInputsResponse</returns>
        public async System.Threading.Tasks.Task<GetAdditionalSellerInputsResponse> GetAdditionalSellerInputsOldAsync(GetAdditionalSellerInputsRequest body)
        {
            ApiResponse<GetAdditionalSellerInputsResponse> localVarResponse = await GetAdditionalSellerInputsOldAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetAdditionalSellerInputsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAdditionalSellerInputsResponse>> GetAdditionalSellerInputsOldAsyncWithHttpInfo(GetAdditionalSellerInputsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MerchantFulfillmentApi->GetAdditionalSellerInputsOld");

            var localVarPath = "/mfn/v0/sellerInputs";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdditionalSellerInputsOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAdditionalSellerInputsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAdditionalSellerInputsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAdditionalSellerInputsResponse)));
        }

        /// <summary>
        ///  Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetEligibleShipmentServicesResponse</returns>
        public GetEligibleShipmentServicesResponse GetEligibleShipmentServices(GetEligibleShipmentServicesRequest body)
        {
            ApiResponse<GetEligibleShipmentServicesResponse> localVarResponse = GetEligibleShipmentServicesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetEligibleShipmentServicesResponse</returns>
        public ApiResponse<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesWithHttpInfo(GetEligibleShipmentServicesRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MerchantFulfillmentApi->GetEligibleShipmentServices");

            var localVarPath = "/mfn/v0/eligibleShippingServices";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEligibleShipmentServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetEligibleShipmentServicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetEligibleShipmentServicesResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetEligibleShipmentServicesResponse)));
        }

        /// <summary>
        ///  Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetEligibleShipmentServicesResponse</returns>
        public async System.Threading.Tasks.Task<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesAsync(GetEligibleShipmentServicesRequest body)
        {
            ApiResponse<GetEligibleShipmentServicesResponse> localVarResponse = await GetEligibleShipmentServicesAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetEligibleShipmentServicesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetEligibleShipmentServicesResponse>> GetEligibleShipmentServicesAsyncWithHttpInfo(GetEligibleShipmentServicesRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MerchantFulfillmentApi->GetEligibleShipmentServices");

            var localVarPath = "/mfn/v0/eligibleShippingServices";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEligibleShipmentServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetEligibleShipmentServicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetEligibleShipmentServicesResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetEligibleShipmentServicesResponse)));
        }

        /// <summary>
        ///  Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetEligibleShipmentServicesResponse</returns>
        public GetEligibleShipmentServicesResponse GetEligibleShipmentServicesOld(GetEligibleShipmentServicesRequest body)
        {
            ApiResponse<GetEligibleShipmentServicesResponse> localVarResponse = GetEligibleShipmentServicesOldWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetEligibleShipmentServicesResponse</returns>
        public ApiResponse<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesOldWithHttpInfo(GetEligibleShipmentServicesRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MerchantFulfillmentApi->GetEligibleShipmentServicesOld");

            var localVarPath = "/mfn/v0/eligibleServices";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEligibleShipmentServicesOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetEligibleShipmentServicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetEligibleShipmentServicesResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetEligibleShipmentServicesResponse)));
        }

        /// <summary>
        ///  Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetEligibleShipmentServicesResponse</returns>
        public async System.Threading.Tasks.Task<GetEligibleShipmentServicesResponse> GetEligibleShipmentServicesOldAsync(GetEligibleShipmentServicesRequest body)
        {
            ApiResponse<GetEligibleShipmentServicesResponse> localVarResponse = await GetEligibleShipmentServicesOldAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetEligibleShipmentServicesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetEligibleShipmentServicesResponse>> GetEligibleShipmentServicesOldAsyncWithHttpInfo(GetEligibleShipmentServicesRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MerchantFulfillmentApi->GetEligibleShipmentServicesOld");

            var localVarPath = "/mfn/v0/eligibleServices";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEligibleShipmentServicesOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetEligibleShipmentServicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetEligibleShipmentServicesResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetEligibleShipmentServicesResponse)));
        }

        /// <summary>
        ///  Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>GetShipmentResponse</returns>
        public GetShipmentResponse GetShipment(string shipmentId)
        {
            ApiResponse<GetShipmentResponse> localVarResponse = GetShipmentWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>ApiResponse of GetShipmentResponse</returns>
        public ApiResponse<GetShipmentResponse> GetShipmentWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling MerchantFulfillmentApi->GetShipment");

            var localVarPath = "/mfn/v0/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentResponse)));
        }

        /// <summary>
        ///  Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>Task of GetShipmentResponse</returns>
        public async System.Threading.Tasks.Task<GetShipmentResponse> GetShipmentAsync(string shipmentId)
        {
            ApiResponse<GetShipmentResponse> localVarResponse = await GetShipmentAsyncWithHttpInfo(shipmentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The Amazon-defined shipment identifier for the shipment.</param>
        /// <returns>Task of ApiResponse (GetShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetShipmentResponse>> GetShipmentAsyncWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling MerchantFulfillmentApi->GetShipment");

            var localVarPath = "/mfn/v0/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentResponse)));
        }

    }
}
