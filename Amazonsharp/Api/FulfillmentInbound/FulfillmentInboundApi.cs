/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AmazonSharp.Clients;
using AmazonSharp.Models.FulfillmentInbound;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace AmazonSharp.Api.FulfillmentInbound
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFbaInboundApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>ConfirmPreorderResponse</returns>
        ConfirmPreorderResponse ConfirmPreorder(string shipmentId, DateTime? needByDate, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>ApiResponse of ConfirmPreorderResponse</returns>
        ApiResponse<ConfirmPreorderResponse> ConfirmPreorderWithHttpInfo(string shipmentId, DateTime? needByDate, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller&#39;s account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ConfirmTransportResponse</returns>
        ConfirmTransportResponse ConfirmTransport(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller&#39;s account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of ConfirmTransportResponse</returns>
        ApiResponse<ConfirmTransportResponse> ConfirmTransportWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>InboundShipmentResponse</returns>
        InboundShipmentResponse CreateInboundShipment(InboundShipmentRequest body, string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of InboundShipmentResponse</returns>
        ApiResponse<InboundShipmentResponse> CreateInboundShipmentWithHttpInfo(InboundShipmentRequest body, string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon&#39;s fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateInboundShipmentPlanResponse</returns>
        CreateInboundShipmentPlanResponse CreateInboundShipmentPlan(CreateInboundShipmentPlanRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon&#39;s fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateInboundShipmentPlanResponse</returns>
        ApiResponse<CreateInboundShipmentPlanResponse> CreateInboundShipmentPlanWithHttpInfo(CreateInboundShipmentPlanRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>EstimateTransportResponse</returns>
        EstimateTransportResponse EstimateTransport(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of EstimateTransportResponse</returns>
        ApiResponse<EstimateTransportResponse> EstimateTransportWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>GetBillOfLadingResponse</returns>
        GetBillOfLadingResponse GetBillOfLading(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of GetBillOfLadingResponse</returns>
        ApiResponse<GetBillOfLadingResponse> GetBillOfLadingWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon&#39;s fulfillment network. Sellers may still ship items that are not recommended, at their discretion.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.  (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. (optional)</param>
        /// <returns>GetInboundGuidanceResponse</returns>
        GetInboundGuidanceResponse GetInboundGuidance(string marketplaceId, List<string> sellerSKUList = null, List<string> aSINList = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon&#39;s fulfillment network. Sellers may still ship items that are not recommended, at their discretion.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.  (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. (optional)</param>
        /// <returns>ApiResponse of GetInboundGuidanceResponse</returns>
        ApiResponse<GetInboundGuidanceResponse> GetInboundGuidanceWithHttpInfo(string marketplaceId, List<string> sellerSKUList = null, List<string> aSINList = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <returns>GetLabelsResponse</returns>
        GetLabelsResponse GetLabels(string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string> packageLabelsToPrint = null, int? numberOfPallets = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <returns>ApiResponse of GetLabelsResponse</returns>
        ApiResponse<GetLabelsResponse> GetLabelsWithHttpInfo(string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string> packageLabelsToPrint = null, int? numberOfPallets = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>GetPreorderInfoResponse</returns>
        GetPreorderInfoResponse GetPreorderInfo(string shipmentId, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>ApiResponse of GetPreorderInfoResponse</returns>
        ApiResponse<GetPreorderInfoResponse> GetPreorderInfoWithHttpInfo(string shipmentId, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>GetPrepInstructionsResponse</returns>
        GetPrepInstructionsResponse GetPrepInstructions(string shipToCountryCode, List<string> sellerSKUList = null, List<string> aSINList = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>ApiResponse of GetPrepInstructionsResponse</returns>
        ApiResponse<GetPrepInstructionsResponse> GetPrepInstructionsWithHttpInfo(string shipToCountryCode, List<string> sellerSKUList = null, List<string> aSINList = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>GetShipmentItemsResponse</returns>
        GetShipmentItemsResponse GetShipmentItems(string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ApiResponse of GetShipmentItemsResponse</returns>
        ApiResponse<GetShipmentItemsResponse> GetShipmentItemsWithHttpInfo(string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>GetShipmentItemsResponse</returns>
        GetShipmentItemsResponse GetShipmentItemsByShipmentId(string shipmentId, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>ApiResponse of GetShipmentItemsResponse</returns>
        ApiResponse<GetShipmentItemsResponse> GetShipmentItemsByShipmentIdWithHttpInfo(string shipmentId, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>GetShipmentsResponse</returns>
        GetShipmentsResponse GetShipments(string queryType, string marketplaceId, List<string> shipmentStatusList = null, List<string> shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ApiResponse of GetShipmentsResponse</returns>
        ApiResponse<GetShipmentsResponse> GetShipmentsWithHttpInfo(string queryType, string marketplaceId, List<string> shipmentStatusList = null, List<string> shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>GetTransportDetailsResponse</returns>
        GetTransportDetailsResponse GetTransportDetails(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of GetTransportDetailsResponse</returns>
        ApiResponse<GetTransportDetailsResponse> GetTransportDetailsWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="body"></param>
        /// <returns>PutTransportDetailsResponse</returns>
        PutTransportDetailsResponse PutTransportDetails(string shipmentId, PutTransportDetailsRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PutTransportDetailsResponse</returns>
        ApiResponse<PutTransportDetailsResponse> PutTransportDetailsWithHttpInfo(string shipmentId, PutTransportDetailsRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds, updates, or removes items from the inbound shipment identified by the specified shipment identifier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>InboundShipmentResponse</returns>
        InboundShipmentResponse UpdateInboundShipment(InboundShipmentRequest body, string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds, updates, or removes items from the inbound shipment identified by the specified shipment identifier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of InboundShipmentResponse</returns>
        ApiResponse<InboundShipmentResponse> UpdateInboundShipmentWithHttpInfo(InboundShipmentRequest body, string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>VoidTransportResponse</returns>
        VoidTransportResponse VoidTransport(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of VoidTransportResponse</returns>
        ApiResponse<VoidTransportResponse> VoidTransportWithHttpInfo(string shipmentId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Task of ConfirmPreorderResponse</returns>
        System.Threading.Tasks.Task<ConfirmPreorderResponse> ConfirmPreorderAsync(string shipmentId, DateTime? needByDate, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Task of ApiResponse (ConfirmPreorderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmPreorderResponse>> ConfirmPreorderAsyncWithHttpInfo(string shipmentId, DateTime? needByDate, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller&#39;s account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ConfirmTransportResponse</returns>
        System.Threading.Tasks.Task<ConfirmTransportResponse> ConfirmTransportAsync(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller&#39;s account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (ConfirmTransportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmTransportResponse>> ConfirmTransportAsyncWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of InboundShipmentResponse</returns>
        System.Threading.Tasks.Task<InboundShipmentResponse> CreateInboundShipmentAsync(InboundShipmentRequest body, string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (InboundShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundShipmentResponse>> CreateInboundShipmentAsyncWithHttpInfo(InboundShipmentRequest body, string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon&#39;s fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateInboundShipmentPlanResponse</returns>
        System.Threading.Tasks.Task<CreateInboundShipmentPlanResponse> CreateInboundShipmentPlanAsync(CreateInboundShipmentPlanRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon&#39;s fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateInboundShipmentPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateInboundShipmentPlanResponse>> CreateInboundShipmentPlanAsyncWithHttpInfo(CreateInboundShipmentPlanRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of EstimateTransportResponse</returns>
        System.Threading.Tasks.Task<EstimateTransportResponse> EstimateTransportAsync(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (EstimateTransportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EstimateTransportResponse>> EstimateTransportAsyncWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of GetBillOfLadingResponse</returns>
        System.Threading.Tasks.Task<GetBillOfLadingResponse> GetBillOfLadingAsync(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (GetBillOfLadingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBillOfLadingResponse>> GetBillOfLadingAsyncWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon&#39;s fulfillment network. Sellers may still ship items that are not recommended, at their discretion.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.  (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. (optional)</param>
        /// <returns>Task of GetInboundGuidanceResponse</returns>
        System.Threading.Tasks.Task<GetInboundGuidanceResponse> GetInboundGuidanceAsync(string marketplaceId, List<string> sellerSKUList = null, List<string> aSINList = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon&#39;s fulfillment network. Sellers may still ship items that are not recommended, at their discretion.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.  (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. (optional)</param>
        /// <returns>Task of ApiResponse (GetInboundGuidanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInboundGuidanceResponse>> GetInboundGuidanceAsyncWithHttpInfo(string marketplaceId, List<string> sellerSKUList = null, List<string> aSINList = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <returns>Task of GetLabelsResponse</returns>
        System.Threading.Tasks.Task<GetLabelsResponse> GetLabelsAsync(string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string> packageLabelsToPrint = null, int? numberOfPallets = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <returns>Task of ApiResponse (GetLabelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLabelsResponse>> GetLabelsAsyncWithHttpInfo(string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string> packageLabelsToPrint = null, int? numberOfPallets = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Task of GetPreorderInfoResponse</returns>
        System.Threading.Tasks.Task<GetPreorderInfoResponse> GetPreorderInfoAsync(string shipmentId, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Task of ApiResponse (GetPreorderInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPreorderInfoResponse>> GetPreorderInfoAsyncWithHttpInfo(string shipmentId, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>Task of GetPrepInstructionsResponse</returns>
        System.Threading.Tasks.Task<GetPrepInstructionsResponse> GetPrepInstructionsAsync(string shipToCountryCode, List<string> sellerSKUList = null, List<string> aSINList = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>Task of ApiResponse (GetPrepInstructionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPrepInstructionsResponse>> GetPrepInstructionsAsyncWithHttpInfo(string shipToCountryCode, List<string> sellerSKUList = null, List<string> aSINList = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of GetShipmentItemsResponse</returns>
        System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsAsync(string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipmentItemsResponse>> GetShipmentItemsAsyncWithHttpInfo(string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>Task of GetShipmentItemsResponse</returns>
        System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsByShipmentIdAsync(string shipmentId, string marketplaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>Task of ApiResponse (GetShipmentItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipmentItemsResponse>> GetShipmentItemsByShipmentIdAsyncWithHttpInfo(string shipmentId, string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of GetShipmentsResponse</returns>
        System.Threading.Tasks.Task<GetShipmentsResponse> GetShipmentsAsync(string queryType, string marketplaceId, List<string> shipmentStatusList = null, List<string> shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipmentsResponse>> GetShipmentsAsyncWithHttpInfo(string queryType, string marketplaceId, List<string> shipmentStatusList = null, List<string> shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of GetTransportDetailsResponse</returns>
        System.Threading.Tasks.Task<GetTransportDetailsResponse> GetTransportDetailsAsync(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (GetTransportDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTransportDetailsResponse>> GetTransportDetailsAsyncWithHttpInfo(string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="body"></param>
        /// <returns>Task of PutTransportDetailsResponse</returns>
        System.Threading.Tasks.Task<PutTransportDetailsResponse> PutTransportDetailsAsync(string shipmentId, PutTransportDetailsRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PutTransportDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutTransportDetailsResponse>> PutTransportDetailsAsyncWithHttpInfo(string shipmentId, PutTransportDetailsRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds, updates, or removes items from the inbound shipment identified by the specified shipment identifier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of InboundShipmentResponse</returns>
        System.Threading.Tasks.Task<InboundShipmentResponse> UpdateInboundShipmentAsync(InboundShipmentRequest body, string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds, updates, or removes items from the inbound shipment identified by the specified shipment identifier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (InboundShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundShipmentResponse>> UpdateInboundShipmentAsyncWithHttpInfo(InboundShipmentRequest body, string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of VoidTransportResponse</returns>
        System.Threading.Tasks.Task<VoidTransportResponse> VoidTransportAsync(string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (VoidTransportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VoidTransportResponse>> VoidTransportAsyncWithHttpInfo(string shipmentId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FbaInboundApi : IFbaInboundApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FbaInboundApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FbaInboundApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FbaInboundApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FbaInboundApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>ConfirmPreorderResponse</returns>
        public ConfirmPreorderResponse ConfirmPreorder(string shipmentId, DateTime? needByDate, string marketplaceId)
        {
            ApiResponse<ConfirmPreorderResponse> localVarResponse = ConfirmPreorderWithHttpInfo(shipmentId, needByDate, marketplaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>ApiResponse of ConfirmPreorderResponse</returns>
        public ApiResponse<ConfirmPreorderResponse> ConfirmPreorderWithHttpInfo(string shipmentId, DateTime? needByDate, string marketplaceId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->ConfirmPreorder");
            // verify the required parameter 'needByDate' is set
            if (needByDate == null)
                throw new ApiException(400, "Missing required parameter 'needByDate' when calling FbaInboundApi->ConfirmPreorder");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->ConfirmPreorder");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/preorder/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (needByDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NeedByDate", needByDate)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmPreorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmPreorderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmPreorderResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmPreorderResponse)));
        }

        /// <summary>
        ///  Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Task of ConfirmPreorderResponse</returns>
        public async System.Threading.Tasks.Task<ConfirmPreorderResponse> ConfirmPreorderAsync(string shipmentId, DateTime? needByDate, string marketplaceId)
        {
            ApiResponse<ConfirmPreorderResponse> localVarResponse = await ConfirmPreorderAsyncWithHttpInfo(shipmentId, needByDate, marketplaceId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="needByDate">Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Task of ApiResponse (ConfirmPreorderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmPreorderResponse>> ConfirmPreorderAsyncWithHttpInfo(string shipmentId, DateTime? needByDate, string marketplaceId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->ConfirmPreorder");
            // verify the required parameter 'needByDate' is set
            if (needByDate == null)
                throw new ApiException(400, "Missing required parameter 'needByDate' when calling FbaInboundApi->ConfirmPreorder");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->ConfirmPreorder");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/preorder/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (needByDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NeedByDate", needByDate)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmPreorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmPreorderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmPreorderResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmPreorderResponse)));
        }

        /// <summary>
        ///  Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller&#39;s account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ConfirmTransportResponse</returns>
        public ConfirmTransportResponse ConfirmTransport(string shipmentId)
        {
            ApiResponse<ConfirmTransportResponse> localVarResponse = ConfirmTransportWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller&#39;s account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of ConfirmTransportResponse</returns>
        public ApiResponse<ConfirmTransportResponse> ConfirmTransportWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->ConfirmTransport");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/transport/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmTransport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmTransportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmTransportResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmTransportResponse)));
        }

        /// <summary>
        ///  Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller&#39;s account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ConfirmTransportResponse</returns>
        public async System.Threading.Tasks.Task<ConfirmTransportResponse> ConfirmTransportAsync(string shipmentId)
        {
            ApiResponse<ConfirmTransportResponse> localVarResponse = await ConfirmTransportAsyncWithHttpInfo(shipmentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller&#39;s account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (ConfirmTransportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmTransportResponse>> ConfirmTransportAsyncWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->ConfirmTransport");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/transport/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmTransport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmTransportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmTransportResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmTransportResponse)));
        }

        /// <summary>
        ///  Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>InboundShipmentResponse</returns>
        public InboundShipmentResponse CreateInboundShipment(InboundShipmentRequest body, string shipmentId)
        {
            ApiResponse<InboundShipmentResponse> localVarResponse = CreateInboundShipmentWithHttpInfo(body, shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of InboundShipmentResponse</returns>
        public ApiResponse<InboundShipmentResponse> CreateInboundShipmentWithHttpInfo(InboundShipmentRequest body, string shipmentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaInboundApi->CreateInboundShipment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->CreateInboundShipment");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInboundShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InboundShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InboundShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InboundShipmentResponse)));
        }

        /// <summary>
        ///  Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of InboundShipmentResponse</returns>
        public async System.Threading.Tasks.Task<InboundShipmentResponse> CreateInboundShipmentAsync(InboundShipmentRequest body, string shipmentId)
        {
            ApiResponse<InboundShipmentResponse> localVarResponse = await CreateInboundShipmentAsyncWithHttpInfo(body, shipmentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (InboundShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InboundShipmentResponse>> CreateInboundShipmentAsyncWithHttpInfo(InboundShipmentRequest body, string shipmentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaInboundApi->CreateInboundShipment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->CreateInboundShipment");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInboundShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InboundShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InboundShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InboundShipmentResponse)));
        }

        /// <summary>
        ///  Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon&#39;s fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateInboundShipmentPlanResponse</returns>
        public CreateInboundShipmentPlanResponse CreateInboundShipmentPlan(CreateInboundShipmentPlanRequest body)
        {
            ApiResponse<CreateInboundShipmentPlanResponse> localVarResponse = CreateInboundShipmentPlanWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon&#39;s fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateInboundShipmentPlanResponse</returns>
        public ApiResponse<CreateInboundShipmentPlanResponse> CreateInboundShipmentPlanWithHttpInfo(CreateInboundShipmentPlanRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaInboundApi->CreateInboundShipmentPlan");

            var localVarPath = "/fba/inbound/v0/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInboundShipmentPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateInboundShipmentPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateInboundShipmentPlanResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateInboundShipmentPlanResponse)));
        }

        /// <summary>
        ///  Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon&#39;s fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateInboundShipmentPlanResponse</returns>
        public async System.Threading.Tasks.Task<CreateInboundShipmentPlanResponse> CreateInboundShipmentPlanAsync(CreateInboundShipmentPlanRequest body)
        {
            ApiResponse<CreateInboundShipmentPlanResponse> localVarResponse = await CreateInboundShipmentPlanAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon&#39;s fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateInboundShipmentPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateInboundShipmentPlanResponse>> CreateInboundShipmentPlanAsyncWithHttpInfo(CreateInboundShipmentPlanRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaInboundApi->CreateInboundShipmentPlan");

            var localVarPath = "/fba/inbound/v0/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInboundShipmentPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateInboundShipmentPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateInboundShipmentPlanResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateInboundShipmentPlanResponse)));
        }

        /// <summary>
        ///  Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>EstimateTransportResponse</returns>
        public EstimateTransportResponse EstimateTransport(string shipmentId)
        {
            ApiResponse<EstimateTransportResponse> localVarResponse = EstimateTransportWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of EstimateTransportResponse</returns>
        public ApiResponse<EstimateTransportResponse> EstimateTransportWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->EstimateTransport");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/transport/estimate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstimateTransport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EstimateTransportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EstimateTransportResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EstimateTransportResponse)));
        }

        /// <summary>
        ///  Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of EstimateTransportResponse</returns>
        public async System.Threading.Tasks.Task<EstimateTransportResponse> EstimateTransportAsync(string shipmentId)
        {
            ApiResponse<EstimateTransportResponse> localVarResponse = await EstimateTransportAsyncWithHttpInfo(shipmentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (EstimateTransportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EstimateTransportResponse>> EstimateTransportAsyncWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->EstimateTransport");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/transport/estimate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstimateTransport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EstimateTransportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EstimateTransportResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EstimateTransportResponse)));
        }

        /// <summary>
        ///  Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>GetBillOfLadingResponse</returns>
        public GetBillOfLadingResponse GetBillOfLading(string shipmentId)
        {
            ApiResponse<GetBillOfLadingResponse> localVarResponse = GetBillOfLadingWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of GetBillOfLadingResponse</returns>
        public ApiResponse<GetBillOfLadingResponse> GetBillOfLadingWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetBillOfLading");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/billOfLading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillOfLading", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBillOfLadingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBillOfLadingResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBillOfLadingResponse)));
        }

        /// <summary>
        ///  Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of GetBillOfLadingResponse</returns>
        public async System.Threading.Tasks.Task<GetBillOfLadingResponse> GetBillOfLadingAsync(string shipmentId)
        {
            ApiResponse<GetBillOfLadingResponse> localVarResponse = await GetBillOfLadingAsyncWithHttpInfo(shipmentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (GetBillOfLadingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBillOfLadingResponse>> GetBillOfLadingAsyncWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetBillOfLading");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/billOfLading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillOfLading", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBillOfLadingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBillOfLadingResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBillOfLadingResponse)));
        }

        /// <summary>
        ///  Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon&#39;s fulfillment network. Sellers may still ship items that are not recommended, at their discretion.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.  (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. (optional)</param>
        /// <returns>GetInboundGuidanceResponse</returns>
        public GetInboundGuidanceResponse GetInboundGuidance(string marketplaceId, List<string> sellerSKUList = null, List<string> aSINList = null)
        {
            ApiResponse<GetInboundGuidanceResponse> localVarResponse = GetInboundGuidanceWithHttpInfo(marketplaceId, sellerSKUList, aSINList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon&#39;s fulfillment network. Sellers may still ship items that are not recommended, at their discretion.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.  (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. (optional)</param>
        /// <returns>ApiResponse of GetInboundGuidanceResponse</returns>
        public ApiResponse<GetInboundGuidanceResponse> GetInboundGuidanceWithHttpInfo(string marketplaceId, List<string> sellerSKUList = null, List<string> aSINList = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetInboundGuidance");

            var localVarPath = "/fba/inbound/v0/itemsGuidance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (sellerSKUList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "SellerSKUList", sellerSKUList)); // query parameter
            if (aSINList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ASINList", aSINList)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundGuidance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInboundGuidanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInboundGuidanceResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInboundGuidanceResponse)));
        }

        /// <summary>
        ///  Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon&#39;s fulfillment network. Sellers may still ship items that are not recommended, at their discretion.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.  (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. (optional)</param>
        /// <returns>Task of GetInboundGuidanceResponse</returns>
        public async System.Threading.Tasks.Task<GetInboundGuidanceResponse> GetInboundGuidanceAsync(string marketplaceId, List<string> sellerSKUList = null, List<string> aSINList = null)
        {
            ApiResponse<GetInboundGuidanceResponse> localVarResponse = await GetInboundGuidanceAsyncWithHttpInfo(marketplaceId, sellerSKUList, aSINList);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon&#39;s fulfillment network. Sellers may still ship items that are not recommended, at their discretion.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.  (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon&#39;s fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. (optional)</param>
        /// <returns>Task of ApiResponse (GetInboundGuidanceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInboundGuidanceResponse>> GetInboundGuidanceAsyncWithHttpInfo(string marketplaceId, List<string> sellerSKUList = null, List<string> aSINList = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetInboundGuidance");

            var localVarPath = "/fba/inbound/v0/itemsGuidance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (sellerSKUList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "SellerSKUList", sellerSKUList)); // query parameter
            if (aSINList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ASINList", aSINList)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundGuidance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInboundGuidanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInboundGuidanceResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInboundGuidanceResponse)));
        }

        /// <summary>
        ///  Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <returns>GetLabelsResponse</returns>
        public GetLabelsResponse GetLabels(string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string> packageLabelsToPrint = null, int? numberOfPallets = null)
        {
            ApiResponse<GetLabelsResponse> localVarResponse = GetLabelsWithHttpInfo(shipmentId, pageType, labelType, numberOfPackages, packageLabelsToPrint, numberOfPallets);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <returns>ApiResponse of GetLabelsResponse</returns>
        public ApiResponse<GetLabelsResponse> GetLabelsWithHttpInfo(string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string> packageLabelsToPrint = null, int? numberOfPallets = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetLabels");
            // verify the required parameter 'pageType' is set
            if (pageType == null)
                throw new ApiException(400, "Missing required parameter 'pageType' when calling FbaInboundApi->GetLabels");
            // verify the required parameter 'labelType' is set
            if (labelType == null)
                throw new ApiException(400, "Missing required parameter 'labelType' when calling FbaInboundApi->GetLabels");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PageType", pageType)); // query parameter
            if (labelType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "LabelType", labelType)); // query parameter
            if (numberOfPackages != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NumberOfPackages", numberOfPackages)); // query parameter
            if (packageLabelsToPrint != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "PackageLabelsToPrint", packageLabelsToPrint)); // query parameter
            if (numberOfPallets != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NumberOfPallets", numberOfPallets)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLabelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLabelsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLabelsResponse)));
        }

        /// <summary>
        ///  Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <returns>Task of GetLabelsResponse</returns>
        public async System.Threading.Tasks.Task<GetLabelsResponse> GetLabelsAsync(string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string> packageLabelsToPrint = null, int? numberOfPallets = null)
        {
            ApiResponse<GetLabelsResponse> localVarResponse = await GetLabelsAsyncWithHttpInfo(shipmentId, pageType, labelType, numberOfPackages, packageLabelsToPrint, numberOfPallets);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <returns>Task of ApiResponse (GetLabelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLabelsResponse>> GetLabelsAsyncWithHttpInfo(string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string> packageLabelsToPrint = null, int? numberOfPallets = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetLabels");
            // verify the required parameter 'pageType' is set
            if (pageType == null)
                throw new ApiException(400, "Missing required parameter 'pageType' when calling FbaInboundApi->GetLabels");
            // verify the required parameter 'labelType' is set
            if (labelType == null)
                throw new ApiException(400, "Missing required parameter 'labelType' when calling FbaInboundApi->GetLabels");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PageType", pageType)); // query parameter
            if (labelType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "LabelType", labelType)); // query parameter
            if (numberOfPackages != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NumberOfPackages", numberOfPackages)); // query parameter
            if (packageLabelsToPrint != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "PackageLabelsToPrint", packageLabelsToPrint)); // query parameter
            if (numberOfPallets != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NumberOfPallets", numberOfPallets)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLabelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetLabelsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLabelsResponse)));
        }

        /// <summary>
        ///  Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>GetPreorderInfoResponse</returns>
        public GetPreorderInfoResponse GetPreorderInfo(string shipmentId, string marketplaceId)
        {
            ApiResponse<GetPreorderInfoResponse> localVarResponse = GetPreorderInfoWithHttpInfo(shipmentId, marketplaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>ApiResponse of GetPreorderInfoResponse</returns>
        public ApiResponse<GetPreorderInfoResponse> GetPreorderInfoWithHttpInfo(string shipmentId, string marketplaceId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetPreorderInfo");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetPreorderInfo");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/preorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreorderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPreorderInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPreorderInfoResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPreorderInfoResponse)));
        }

        /// <summary>
        ///  Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Task of GetPreorderInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetPreorderInfoResponse> GetPreorderInfoAsync(string shipmentId, string marketplaceId)
        {
            ApiResponse<GetPreorderInfoResponse> localVarResponse = await GetPreorderInfoAsyncWithHttpInfo(shipmentId, marketplaceId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace the shipment is tied to.</param>
        /// <returns>Task of ApiResponse (GetPreorderInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPreorderInfoResponse>> GetPreorderInfoAsyncWithHttpInfo(string shipmentId, string marketplaceId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetPreorderInfo");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetPreorderInfo");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/preorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreorderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPreorderInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPreorderInfoResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPreorderInfoResponse)));
        }

        /// <summary>
        ///  Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>GetPrepInstructionsResponse</returns>
        public GetPrepInstructionsResponse GetPrepInstructions(string shipToCountryCode, List<string> sellerSKUList = null, List<string> aSINList = null)
        {
            ApiResponse<GetPrepInstructionsResponse> localVarResponse = GetPrepInstructionsWithHttpInfo(shipToCountryCode, sellerSKUList, aSINList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>ApiResponse of GetPrepInstructionsResponse</returns>
        public ApiResponse<GetPrepInstructionsResponse> GetPrepInstructionsWithHttpInfo(string shipToCountryCode, List<string> sellerSKUList = null, List<string> aSINList = null)
        {
            // verify the required parameter 'shipToCountryCode' is set
            if (shipToCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'shipToCountryCode' when calling FbaInboundApi->GetPrepInstructions");

            var localVarPath = "/fba/inbound/v0/prepInstructions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipToCountryCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ShipToCountryCode", shipToCountryCode)); // query parameter
            if (sellerSKUList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "SellerSKUList", sellerSKUList)); // query parameter
            if (aSINList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ASINList", aSINList)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrepInstructions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrepInstructionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPrepInstructionsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrepInstructionsResponse)));
        }

        /// <summary>
        ///  Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>Task of GetPrepInstructionsResponse</returns>
        public async System.Threading.Tasks.Task<GetPrepInstructionsResponse> GetPrepInstructionsAsync(string shipToCountryCode, List<string> sellerSKUList = null, List<string> aSINList = null)
        {
            ApiResponse<GetPrepInstructionsResponse> localVarResponse = await GetPrepInstructionsAsyncWithHttpInfo(shipToCountryCode, sellerSKUList, aSINList);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>Task of ApiResponse (GetPrepInstructionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPrepInstructionsResponse>> GetPrepInstructionsAsyncWithHttpInfo(string shipToCountryCode, List<string> sellerSKUList = null, List<string> aSINList = null)
        {
            // verify the required parameter 'shipToCountryCode' is set
            if (shipToCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'shipToCountryCode' when calling FbaInboundApi->GetPrepInstructions");

            var localVarPath = "/fba/inbound/v0/prepInstructions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipToCountryCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ShipToCountryCode", shipToCountryCode)); // query parameter
            if (sellerSKUList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "SellerSKUList", sellerSKUList)); // query parameter
            if (aSINList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ASINList", aSINList)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrepInstructions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrepInstructionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPrepInstructionsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrepInstructionsResponse)));
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>GetShipmentItemsResponse</returns>
        public GetShipmentItemsResponse GetShipmentItems(string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null)
        {
            ApiResponse<GetShipmentItemsResponse> localVarResponse = GetShipmentItemsWithHttpInfo(queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ApiResponse of GetShipmentItemsResponse</returns>
        public ApiResponse<GetShipmentItemsResponse> GetShipmentItemsWithHttpInfo(string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null)
        {
            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new ApiException(400, "Missing required parameter 'queryType' when calling FbaInboundApi->GetShipmentItems");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetShipmentItems");

            var localVarPath = "/fba/inbound/v0/shipmentItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryType", queryType)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetShipmentItemsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentItemsResponse)));
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of GetShipmentItemsResponse</returns>
        public async System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsAsync(string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null)
        {
            ApiResponse<GetShipmentItemsResponse> localVarResponse = await GetShipmentItemsAsyncWithHttpInfo(queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetShipmentItemsResponse>> GetShipmentItemsAsyncWithHttpInfo(string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null)
        {
            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new ApiException(400, "Missing required parameter 'queryType' when calling FbaInboundApi->GetShipmentItems");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetShipmentItems");

            var localVarPath = "/fba/inbound/v0/shipmentItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryType", queryType)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetShipmentItemsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentItemsResponse)));
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>GetShipmentItemsResponse</returns>
        public GetShipmentItemsResponse GetShipmentItemsByShipmentId(string shipmentId, string marketplaceId)
        {
            ApiResponse<GetShipmentItemsResponse> localVarResponse = GetShipmentItemsByShipmentIdWithHttpInfo(shipmentId, marketplaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>ApiResponse of GetShipmentItemsResponse</returns>
        public ApiResponse<GetShipmentItemsResponse> GetShipmentItemsByShipmentIdWithHttpInfo(string shipmentId, string marketplaceId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetShipmentItemsByShipmentId");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetShipmentItemsByShipmentId");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentItemsByShipmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetShipmentItemsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentItemsResponse)));
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>Task of GetShipmentItemsResponse</returns>
        public async System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsByShipmentIdAsync(string shipmentId, string marketplaceId)
        {
            ApiResponse<GetShipmentItemsResponse> localVarResponse = await GetShipmentItemsByShipmentIdAsyncWithHttpInfo(shipmentId, marketplaceId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <returns>Task of ApiResponse (GetShipmentItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetShipmentItemsResponse>> GetShipmentItemsByShipmentIdAsyncWithHttpInfo(string shipmentId, string marketplaceId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetShipmentItemsByShipmentId");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetShipmentItemsByShipmentId");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentItemsByShipmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetShipmentItemsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentItemsResponse)));
        }

        /// <summary>
        ///  Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>GetShipmentsResponse</returns>
        public GetShipmentsResponse GetShipments(string queryType, string marketplaceId, List<string> shipmentStatusList = null, List<string> shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null)
        {
            ApiResponse<GetShipmentsResponse> localVarResponse = GetShipmentsWithHttpInfo(queryType, marketplaceId, shipmentStatusList, shipmentIdList, lastUpdatedAfter, lastUpdatedBefore, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ApiResponse of GetShipmentsResponse</returns>
        public ApiResponse<GetShipmentsResponse> GetShipmentsWithHttpInfo(string queryType, string marketplaceId, List<string> shipmentStatusList = null, List<string> shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null)
        {
            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new ApiException(400, "Missing required parameter 'queryType' when calling FbaInboundApi->GetShipments");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetShipments");

            var localVarPath = "/fba/inbound/v0/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentStatusList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ShipmentStatusList", shipmentStatusList)); // query parameter
            if (shipmentIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ShipmentIdList", shipmentIdList)); // query parameter
            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryType", queryType)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetShipmentsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentsResponse)));
        }

        /// <summary>
        ///  Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of GetShipmentsResponse</returns>
        public async System.Threading.Tasks.Task<GetShipmentsResponse> GetShipmentsAsync(string queryType, string marketplaceId, List<string> shipmentStatusList = null, List<string> shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null)
        {
            ApiResponse<GetShipmentsResponse> localVarResponse = await GetShipmentsAsyncWithHttpInfo(queryType, marketplaceId, shipmentStatusList, shipmentIdList, lastUpdatedAfter, lastUpdatedBefore, nextToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetShipmentsResponse>> GetShipmentsAsyncWithHttpInfo(string queryType, string marketplaceId, List<string> shipmentStatusList = null, List<string> shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string nextToken = null)
        {
            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new ApiException(400, "Missing required parameter 'queryType' when calling FbaInboundApi->GetShipments");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetShipments");

            var localVarPath = "/fba/inbound/v0/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentStatusList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ShipmentStatusList", shipmentStatusList)); // query parameter
            if (shipmentIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ShipmentIdList", shipmentIdList)); // query parameter
            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryType", queryType)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetShipmentsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentsResponse)));
        }

        /// <summary>
        ///  Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>GetTransportDetailsResponse</returns>
        public GetTransportDetailsResponse GetTransportDetails(string shipmentId)
        {
            ApiResponse<GetTransportDetailsResponse> localVarResponse = GetTransportDetailsWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of GetTransportDetailsResponse</returns>
        public ApiResponse<GetTransportDetailsResponse> GetTransportDetailsWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetTransportDetails");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/transport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransportDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransportDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTransportDetailsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransportDetailsResponse)));
        }

        /// <summary>
        ///  Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of GetTransportDetailsResponse</returns>
        public async System.Threading.Tasks.Task<GetTransportDetailsResponse> GetTransportDetailsAsync(string shipmentId)
        {
            ApiResponse<GetTransportDetailsResponse> localVarResponse = await GetTransportDetailsAsyncWithHttpInfo(shipmentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (GetTransportDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTransportDetailsResponse>> GetTransportDetailsAsyncWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetTransportDetails");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/transport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransportDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransportDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTransportDetailsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransportDetailsResponse)));
        }

        /// <summary>
        ///  Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="body"></param>
        /// <returns>PutTransportDetailsResponse</returns>
        public PutTransportDetailsResponse PutTransportDetails(string shipmentId, PutTransportDetailsRequest body)
        {
            ApiResponse<PutTransportDetailsResponse> localVarResponse = PutTransportDetailsWithHttpInfo(shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PutTransportDetailsResponse</returns>
        public ApiResponse<PutTransportDetailsResponse> PutTransportDetailsWithHttpInfo(string shipmentId, PutTransportDetailsRequest body)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->PutTransportDetails");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaInboundApi->PutTransportDetails");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/transport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTransportDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutTransportDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutTransportDetailsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutTransportDetailsResponse)));
        }

        /// <summary>
        ///  Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="body"></param>
        /// <returns>Task of PutTransportDetailsResponse</returns>
        public async System.Threading.Tasks.Task<PutTransportDetailsResponse> PutTransportDetailsAsync(string shipmentId, PutTransportDetailsRequest body)
        {
            ApiResponse<PutTransportDetailsResponse> localVarResponse = await PutTransportDetailsAsyncWithHttpInfo(shipmentId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PutTransportDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutTransportDetailsResponse>> PutTransportDetailsAsyncWithHttpInfo(string shipmentId, PutTransportDetailsRequest body)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->PutTransportDetails");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaInboundApi->PutTransportDetails");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/transport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTransportDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutTransportDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutTransportDetailsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutTransportDetailsResponse)));
        }

        /// <summary>
        ///  Adds, updates, or removes items from the inbound shipment identified by the specified shipment identifier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>InboundShipmentResponse</returns>
        public InboundShipmentResponse UpdateInboundShipment(InboundShipmentRequest body, string shipmentId)
        {
            ApiResponse<InboundShipmentResponse> localVarResponse = UpdateInboundShipmentWithHttpInfo(body, shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Adds, updates, or removes items from the inbound shipment identified by the specified shipment identifier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of InboundShipmentResponse</returns>
        public ApiResponse<InboundShipmentResponse> UpdateInboundShipmentWithHttpInfo(InboundShipmentRequest body, string shipmentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaInboundApi->UpdateInboundShipment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->UpdateInboundShipment");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInboundShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InboundShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InboundShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InboundShipmentResponse)));
        }

        /// <summary>
        ///  Adds, updates, or removes items from the inbound shipment identified by the specified shipment identifier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of InboundShipmentResponse</returns>
        public async System.Threading.Tasks.Task<InboundShipmentResponse> UpdateInboundShipmentAsync(InboundShipmentRequest body, string shipmentId)
        {
            ApiResponse<InboundShipmentResponse> localVarResponse = await UpdateInboundShipmentAsyncWithHttpInfo(body, shipmentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Adds, updates, or removes items from the inbound shipment identified by the specified shipment identifier.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (InboundShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InboundShipmentResponse>> UpdateInboundShipmentAsyncWithHttpInfo(InboundShipmentRequest body, string shipmentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaInboundApi->UpdateInboundShipment");
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->UpdateInboundShipment");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInboundShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InboundShipmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InboundShipmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InboundShipmentResponse)));
        }

        /// <summary>
        ///  Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>VoidTransportResponse</returns>
        public VoidTransportResponse VoidTransport(string shipmentId)
        {
            ApiResponse<VoidTransportResponse> localVarResponse = VoidTransportWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of VoidTransportResponse</returns>
        public ApiResponse<VoidTransportResponse> VoidTransportWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->VoidTransport");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/transport/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VoidTransport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VoidTransportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VoidTransportResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoidTransportResponse)));
        }

        /// <summary>
        ///  Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of VoidTransportResponse</returns>
        public async System.Threading.Tasks.Task<VoidTransportResponse> VoidTransportAsync(string shipmentId)
        {
            ApiResponse<VoidTransportResponse> localVarResponse = await VoidTransportAsyncWithHttpInfo(shipmentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (VoidTransportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VoidTransportResponse>> VoidTransportAsyncWithHttpInfo(string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->VoidTransport");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/transport/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VoidTransport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VoidTransportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VoidTransportResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoidTransportResponse)));
        }

    }
}
