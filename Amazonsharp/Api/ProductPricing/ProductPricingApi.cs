/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AmazonSharp.Clients;
using AmazonSharp.Models.ProductPricing;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace AmazonSharp.Api.ProductPricing
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductPricingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <returns>GetPricingResponse</returns>
        GetPricingResponse GetCompetitivePricing(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <returns>ApiResponse of GetPricingResponse</returns>
        ApiResponse<GetPricingResponse> GetCompetitivePricingWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>GetOffersResponse</returns>
        GetOffersResponse GetItemOffers(string marketplaceId, string itemCondition, string asin);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>ApiResponse of GetOffersResponse</returns>
        ApiResponse<GetOffersResponse> GetItemOffersWithHttpInfo(string marketplaceId, string itemCondition, string asin);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <returns>GetOffersResponse</returns>
        GetOffersResponse GetListingOffers(string marketplaceId, string itemCondition, string sellerSKU);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <returns>ApiResponse of GetOffersResponse</returns>
        ApiResponse<GetOffersResponse> GetListingOffersWithHttpInfo(string marketplaceId, string itemCondition, string sellerSKU);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <returns>GetPricingResponse</returns>
        GetPricingResponse GetPricing(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <returns>ApiResponse of GetPricingResponse</returns>
        ApiResponse<GetPricingResponse> GetPricingWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <returns>Task of GetPricingResponse</returns>
        System.Threading.Tasks.Task<GetPricingResponse> GetCompetitivePricingAsync(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <returns>Task of ApiResponse (GetPricingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPricingResponse>> GetCompetitivePricingAsyncWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>Task of GetOffersResponse</returns>
        System.Threading.Tasks.Task<GetOffersResponse> GetItemOffersAsync(string marketplaceId, string itemCondition, string asin);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>Task of ApiResponse (GetOffersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOffersResponse>> GetItemOffersAsyncWithHttpInfo(string marketplaceId, string itemCondition, string asin);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <returns>Task of GetOffersResponse</returns>
        System.Threading.Tasks.Task<GetOffersResponse> GetListingOffersAsync(string marketplaceId, string itemCondition, string sellerSKU);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <returns>Task of ApiResponse (GetOffersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOffersResponse>> GetListingOffersAsyncWithHttpInfo(string marketplaceId, string itemCondition, string sellerSKU);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <returns>Task of GetPricingResponse</returns>
        System.Threading.Tasks.Task<GetPricingResponse> GetPricingAsync(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <returns>Task of ApiResponse (GetPricingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPricingResponse>> GetPricingAsyncWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductPricingApi : IProductPricingApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPricingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductPricingApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPricingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductPricingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <returns>GetPricingResponse</returns>
        public GetPricingResponse GetCompetitivePricing(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null)
        {
            ApiResponse<GetPricingResponse> localVarResponse = GetCompetitivePricingWithHttpInfo(marketplaceId, itemType, asins, skus);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <returns>ApiResponse of GetPricingResponse</returns>
        public ApiResponse<GetPricingResponse> GetCompetitivePricingWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetCompetitivePricing");
            // verify the required parameter 'itemType' is set
            if (itemType == null)
                throw new ApiException(400, "Missing required parameter 'itemType' when calling ProductPricingApi->GetCompetitivePricing");

            var localVarPath = "/products/pricing/v0/competitivePrice";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (asins != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Asins", asins)); // query parameter
            if (skus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Skus", skus)); // query parameter
            if (itemType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemType", itemType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompetitivePricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPricingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPricingResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPricingResponse)));
        }

        /// <summary>
        ///  Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <returns>Task of GetPricingResponse</returns>
        public async System.Threading.Tasks.Task<GetPricingResponse> GetCompetitivePricingAsync(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null)
        {
            ApiResponse<GetPricingResponse> localVarResponse = await GetCompetitivePricingAsyncWithHttpInfo(marketplaceId, itemType, asins, skus);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <returns>Task of ApiResponse (GetPricingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPricingResponse>> GetCompetitivePricingAsyncWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetCompetitivePricing");
            // verify the required parameter 'itemType' is set
            if (itemType == null)
                throw new ApiException(400, "Missing required parameter 'itemType' when calling ProductPricingApi->GetCompetitivePricing");

            var localVarPath = "/products/pricing/v0/competitivePrice";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (asins != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Asins", asins)); // query parameter
            if (skus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Skus", skus)); // query parameter
            if (itemType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemType", itemType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompetitivePricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPricingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPricingResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPricingResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>GetOffersResponse</returns>
        public GetOffersResponse GetItemOffers(string marketplaceId, string itemCondition, string asin)
        {
            ApiResponse<GetOffersResponse> localVarResponse = GetItemOffersWithHttpInfo(marketplaceId, itemCondition, asin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>ApiResponse of GetOffersResponse</returns>
        public ApiResponse<GetOffersResponse> GetItemOffersWithHttpInfo(string marketplaceId, string itemCondition, string asin)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetItemOffers");
            // verify the required parameter 'itemCondition' is set
            if (itemCondition == null)
                throw new ApiException(400, "Missing required parameter 'itemCondition' when calling ProductPricingApi->GetItemOffers");
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling ProductPricingApi->GetItemOffers");

            var localVarPath = "/products/pricing/v0/items/{Asin}/offers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("Asin", Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOffersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOffersResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOffersResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>Task of GetOffersResponse</returns>
        public async System.Threading.Tasks.Task<GetOffersResponse> GetItemOffersAsync(string marketplaceId, string itemCondition, string asin)
        {
            ApiResponse<GetOffersResponse> localVarResponse = await GetItemOffersAsyncWithHttpInfo(marketplaceId, itemCondition, asin);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>Task of ApiResponse (GetOffersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOffersResponse>> GetItemOffersAsyncWithHttpInfo(string marketplaceId, string itemCondition, string asin)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetItemOffers");
            // verify the required parameter 'itemCondition' is set
            if (itemCondition == null)
                throw new ApiException(400, "Missing required parameter 'itemCondition' when calling ProductPricingApi->GetItemOffers");
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling ProductPricingApi->GetItemOffers");

            var localVarPath = "/products/pricing/v0/items/{Asin}/offers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("Asin", Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOffersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOffersResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOffersResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <returns>GetOffersResponse</returns>
        public GetOffersResponse GetListingOffers(string marketplaceId, string itemCondition, string sellerSKU)
        {
            ApiResponse<GetOffersResponse> localVarResponse = GetListingOffersWithHttpInfo(marketplaceId, itemCondition, sellerSKU);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <returns>ApiResponse of GetOffersResponse</returns>
        public ApiResponse<GetOffersResponse> GetListingOffersWithHttpInfo(string marketplaceId, string itemCondition, string sellerSKU)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetListingOffers");
            // verify the required parameter 'itemCondition' is set
            if (itemCondition == null)
                throw new ApiException(400, "Missing required parameter 'itemCondition' when calling ProductPricingApi->GetListingOffers");
            // verify the required parameter 'sellerSKU' is set
            if (sellerSKU == null)
                throw new ApiException(400, "Missing required parameter 'sellerSKU' when calling ProductPricingApi->GetListingOffers");

            var localVarPath = "/products/pricing/v0/listings/{SellerSKU}/offers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerSKU != null) localVarPathParams.Add("SellerSKU", Configuration.ApiClient.ParameterToString(sellerSKU)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListingOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOffersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOffersResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOffersResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <returns>Task of GetOffersResponse</returns>
        public async System.Threading.Tasks.Task<GetOffersResponse> GetListingOffersAsync(string marketplaceId, string itemCondition, string sellerSKU)
        {
            ApiResponse<GetOffersResponse> localVarResponse = await GetListingOffersAsyncWithHttpInfo(marketplaceId, itemCondition, sellerSKU);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <returns>Task of ApiResponse (GetOffersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOffersResponse>> GetListingOffersAsyncWithHttpInfo(string marketplaceId, string itemCondition, string sellerSKU)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetListingOffers");
            // verify the required parameter 'itemCondition' is set
            if (itemCondition == null)
                throw new ApiException(400, "Missing required parameter 'itemCondition' when calling ProductPricingApi->GetListingOffers");
            // verify the required parameter 'sellerSKU' is set
            if (sellerSKU == null)
                throw new ApiException(400, "Missing required parameter 'sellerSKU' when calling ProductPricingApi->GetListingOffers");

            var localVarPath = "/products/pricing/v0/listings/{SellerSKU}/offers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerSKU != null) localVarPathParams.Add("SellerSKU", Configuration.ApiClient.ParameterToString(sellerSKU)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListingOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOffersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOffersResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOffersResponse)));
        }

        /// <summary>
        ///  Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <returns>GetPricingResponse</returns>
        public GetPricingResponse GetPricing(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null)
        {
            ApiResponse<GetPricingResponse> localVarResponse = GetPricingWithHttpInfo(marketplaceId, itemType, asins, skus, itemCondition);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <returns>ApiResponse of GetPricingResponse</returns>
        public ApiResponse<GetPricingResponse> GetPricingWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetPricing");
            // verify the required parameter 'itemType' is set
            if (itemType == null)
                throw new ApiException(400, "Missing required parameter 'itemType' when calling ProductPricingApi->GetPricing");

            var localVarPath = "/products/pricing/v0/price";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (asins != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Asins", asins)); // query parameter
            if (skus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Skus", skus)); // query parameter
            if (itemType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemType", itemType)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPricingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPricingResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPricingResponse)));
        }

        /// <summary>
        ///  Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <returns>Task of GetPricingResponse</returns>
        public async System.Threading.Tasks.Task<GetPricingResponse> GetPricingAsync(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null)
        {
            ApiResponse<GetPricingResponse> localVarResponse = await GetPricingAsyncWithHttpInfo(marketplaceId, itemType, asins, skus, itemCondition);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <returns>Task of ApiResponse (GetPricingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPricingResponse>> GetPricingAsyncWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetPricing");
            // verify the required parameter 'itemType' is set
            if (itemType == null)
                throw new ApiException(400, "Missing required parameter 'itemType' when calling ProductPricingApi->GetPricing");

            var localVarPath = "/products/pricing/v0/price";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (asins != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Asins", asins)); // query parameter
            if (skus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Skus", skus)); // query parameter
            if (itemType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemType", itemType)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPricingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPricingResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPricingResponse)));
        }

    }
}
