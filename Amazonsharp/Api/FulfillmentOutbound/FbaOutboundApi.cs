/* 
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AmazonSharp.Clients;
using AmazonSharp.Models.FulfillmentOutbound;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace AmazonSharp.Api.FulfillmentOutbound
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFbaOutboundApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>CancelFulfillmentOrderResponse</returns>
        CancelFulfillmentOrderResponse CancelFulfillmentOrder(string sellerFulfillmentOrderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>ApiResponse of CancelFulfillmentOrderResponse</returns>
        ApiResponse<CancelFulfillmentOrderResponse> CancelFulfillmentOrderWithHttpInfo(string sellerFulfillmentOrderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon ship items from the seller&#39;s inventory in Amazon&#39;s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateFulfillmentOrderResponse</returns>
        CreateFulfillmentOrderResponse CreateFulfillmentOrder(CreateFulfillmentOrderRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon ship items from the seller&#39;s inventory in Amazon&#39;s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateFulfillmentOrderResponse</returns>
        ApiResponse<CreateFulfillmentOrderResponse> CreateFulfillmentOrderWithHttpInfo(CreateFulfillmentOrderRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a fulfillment return.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer&#39;s request to return items.</param>
        /// <returns>CreateFulfillmentReturnResponse</returns>
        CreateFulfillmentReturnResponse CreateFulfillmentReturn(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a fulfillment return.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer&#39;s request to return items.</param>
        /// <returns>ApiResponse of CreateFulfillmentReturnResponse</returns>
        ApiResponse<CreateFulfillmentReturnResponse> CreateFulfillmentReturnWithHttpInfo(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>GetFulfillmentOrderResponse</returns>
        GetFulfillmentOrderResponse GetFulfillmentOrder(string sellerFulfillmentOrderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>ApiResponse of GetFulfillmentOrderResponse</returns>
        ApiResponse<GetFulfillmentOrderResponse> GetFulfillmentOrderWithHttpInfo(string sellerFulfillmentOrderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetFulfillmentPreviewResponse</returns>
        GetFulfillmentPreviewResponse GetFulfillmentPreview(GetFulfillmentPreviewRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetFulfillmentPreviewResponse</returns>
        ApiResponse<GetFulfillmentPreviewResponse> GetFulfillmentPreviewWithHttpInfo(GetFulfillmentPreviewRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>GetPackageTrackingDetailsResponse</returns>
        GetPackageTrackingDetailsResponse GetPackageTrackingDetails(int? packageNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>ApiResponse of GetPackageTrackingDetailsResponse</returns>
        ApiResponse<GetPackageTrackingDetailsResponse> GetPackageTrackingDetailsWithHttpInfo(int? packageNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryStartDateTime">A date and time used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order. (optional)</param>
        /// <param name="fulfillmentMethod">Indicates the intended recipient channel for the order. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ListAllFulfillmentOrdersResponse</returns>
        ListAllFulfillmentOrdersResponse ListAllFulfillmentOrders(DateTime? queryStartDateTime = null, List<string> fulfillmentMethod = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryStartDateTime">A date and time used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order. (optional)</param>
        /// <param name="fulfillmentMethod">Indicates the intended recipient channel for the order. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ApiResponse of ListAllFulfillmentOrdersResponse</returns>
        ApiResponse<ListAllFulfillmentOrdersResponse> ListAllFulfillmentOrdersWithHttpInfo(DateTime? queryStartDateTime = null, List<string> fulfillmentMethod = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of return reason codes for a seller SKU in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSKU">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes. (optional)</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes. (optional)</param>
        /// <returns>ListReturnReasonCodesResponse</returns>
        ListReturnReasonCodesResponse ListReturnReasonCodes(string sellerSKU, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of return reason codes for a seller SKU in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSKU">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes. (optional)</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes. (optional)</param>
        /// <returns>ApiResponse of ListReturnReasonCodesResponse</returns>
        ApiResponse<ListReturnReasonCodesResponse> ListReturnReasonCodesWithHttpInfo(string sellerSKU, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>UpdateFulfillmentOrderResponse</returns>
        UpdateFulfillmentOrderResponse UpdateFulfillmentOrder(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>ApiResponse of UpdateFulfillmentOrderResponse</returns>
        ApiResponse<UpdateFulfillmentOrderResponse> UpdateFulfillmentOrderWithHttpInfo(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of CancelFulfillmentOrderResponse</returns>
        System.Threading.Tasks.Task<CancelFulfillmentOrderResponse> CancelFulfillmentOrderAsync(string sellerFulfillmentOrderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of ApiResponse (CancelFulfillmentOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelFulfillmentOrderResponse>> CancelFulfillmentOrderAsyncWithHttpInfo(string sellerFulfillmentOrderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon ship items from the seller&#39;s inventory in Amazon&#39;s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateFulfillmentOrderResponse</returns>
        System.Threading.Tasks.Task<CreateFulfillmentOrderResponse> CreateFulfillmentOrderAsync(CreateFulfillmentOrderRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests that Amazon ship items from the seller&#39;s inventory in Amazon&#39;s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateFulfillmentOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFulfillmentOrderResponse>> CreateFulfillmentOrderAsyncWithHttpInfo(CreateFulfillmentOrderRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a fulfillment return.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer&#39;s request to return items.</param>
        /// <returns>Task of CreateFulfillmentReturnResponse</returns>
        System.Threading.Tasks.Task<CreateFulfillmentReturnResponse> CreateFulfillmentReturnAsync(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a fulfillment return.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer&#39;s request to return items.</param>
        /// <returns>Task of ApiResponse (CreateFulfillmentReturnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFulfillmentReturnResponse>> CreateFulfillmentReturnAsyncWithHttpInfo(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of GetFulfillmentOrderResponse</returns>
        System.Threading.Tasks.Task<GetFulfillmentOrderResponse> GetFulfillmentOrderAsync(string sellerFulfillmentOrderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of ApiResponse (GetFulfillmentOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFulfillmentOrderResponse>> GetFulfillmentOrderAsyncWithHttpInfo(string sellerFulfillmentOrderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetFulfillmentPreviewResponse</returns>
        System.Threading.Tasks.Task<GetFulfillmentPreviewResponse> GetFulfillmentPreviewAsync(GetFulfillmentPreviewRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetFulfillmentPreviewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFulfillmentPreviewResponse>> GetFulfillmentPreviewAsyncWithHttpInfo(GetFulfillmentPreviewRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>Task of GetPackageTrackingDetailsResponse</returns>
        System.Threading.Tasks.Task<GetPackageTrackingDetailsResponse> GetPackageTrackingDetailsAsync(int? packageNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>Task of ApiResponse (GetPackageTrackingDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPackageTrackingDetailsResponse>> GetPackageTrackingDetailsAsyncWithHttpInfo(int? packageNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryStartDateTime">A date and time used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order. (optional)</param>
        /// <param name="fulfillmentMethod">Indicates the intended recipient channel for the order. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ListAllFulfillmentOrdersResponse</returns>
        System.Threading.Tasks.Task<ListAllFulfillmentOrdersResponse> ListAllFulfillmentOrdersAsync(DateTime? queryStartDateTime = null, List<string> fulfillmentMethod = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryStartDateTime">A date and time used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order. (optional)</param>
        /// <param name="fulfillmentMethod">Indicates the intended recipient channel for the order. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (ListAllFulfillmentOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAllFulfillmentOrdersResponse>> ListAllFulfillmentOrdersAsyncWithHttpInfo(DateTime? queryStartDateTime = null, List<string> fulfillmentMethod = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of return reason codes for a seller SKU in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSKU">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes. (optional)</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes. (optional)</param>
        /// <returns>Task of ListReturnReasonCodesResponse</returns>
        System.Threading.Tasks.Task<ListReturnReasonCodesResponse> ListReturnReasonCodesAsync(string sellerSKU, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of return reason codes for a seller SKU in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSKU">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes. (optional)</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes. (optional)</param>
        /// <returns>Task of ApiResponse (ListReturnReasonCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReturnReasonCodesResponse>> ListReturnReasonCodesAsyncWithHttpInfo(string sellerSKU, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of UpdateFulfillmentOrderResponse</returns>
        System.Threading.Tasks.Task<UpdateFulfillmentOrderResponse> UpdateFulfillmentOrderAsync(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of ApiResponse (UpdateFulfillmentOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateFulfillmentOrderResponse>> UpdateFulfillmentOrderAsyncWithHttpInfo(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FbaOutboundApi : IFbaOutboundApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FbaOutboundApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FbaOutboundApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FbaOutboundApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FbaOutboundApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>CancelFulfillmentOrderResponse</returns>
        public CancelFulfillmentOrderResponse CancelFulfillmentOrder(string sellerFulfillmentOrderId)
        {
            ApiResponse<CancelFulfillmentOrderResponse> localVarResponse = CancelFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>ApiResponse of CancelFulfillmentOrderResponse</returns>
        public ApiResponse<CancelFulfillmentOrderResponse> CancelFulfillmentOrderWithHttpInfo(string sellerFulfillmentOrderId)
        {
            // verify the required parameter 'sellerFulfillmentOrderId' is set
            if (sellerFulfillmentOrderId == null)
                throw new ApiException(400, "Missing required parameter 'sellerFulfillmentOrderId' when calling FbaOutboundApi->CancelFulfillmentOrder");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders/{sellerFulfillmentOrderId}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerFulfillmentOrderId != null) localVarPathParams.Add("sellerFulfillmentOrderId", Configuration.ApiClient.ParameterToString(sellerFulfillmentOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelFulfillmentOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelFulfillmentOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelFulfillmentOrderResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelFulfillmentOrderResponse)));
        }

        /// <summary>
        ///  Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of CancelFulfillmentOrderResponse</returns>
        public async System.Threading.Tasks.Task<CancelFulfillmentOrderResponse> CancelFulfillmentOrderAsync(string sellerFulfillmentOrderId)
        {
            ApiResponse<CancelFulfillmentOrderResponse> localVarResponse = await CancelFulfillmentOrderAsyncWithHttpInfo(sellerFulfillmentOrderId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of ApiResponse (CancelFulfillmentOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelFulfillmentOrderResponse>> CancelFulfillmentOrderAsyncWithHttpInfo(string sellerFulfillmentOrderId)
        {
            // verify the required parameter 'sellerFulfillmentOrderId' is set
            if (sellerFulfillmentOrderId == null)
                throw new ApiException(400, "Missing required parameter 'sellerFulfillmentOrderId' when calling FbaOutboundApi->CancelFulfillmentOrder");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders/{sellerFulfillmentOrderId}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerFulfillmentOrderId != null) localVarPathParams.Add("sellerFulfillmentOrderId", Configuration.ApiClient.ParameterToString(sellerFulfillmentOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelFulfillmentOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelFulfillmentOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelFulfillmentOrderResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelFulfillmentOrderResponse)));
        }

        /// <summary>
        ///  Requests that Amazon ship items from the seller&#39;s inventory in Amazon&#39;s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateFulfillmentOrderResponse</returns>
        public CreateFulfillmentOrderResponse CreateFulfillmentOrder(CreateFulfillmentOrderRequest body)
        {
            ApiResponse<CreateFulfillmentOrderResponse> localVarResponse = CreateFulfillmentOrderWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests that Amazon ship items from the seller&#39;s inventory in Amazon&#39;s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateFulfillmentOrderResponse</returns>
        public ApiResponse<CreateFulfillmentOrderResponse> CreateFulfillmentOrderWithHttpInfo(CreateFulfillmentOrderRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaOutboundApi->CreateFulfillmentOrder");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFulfillmentOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFulfillmentOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFulfillmentOrderResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFulfillmentOrderResponse)));
        }

        /// <summary>
        ///  Requests that Amazon ship items from the seller&#39;s inventory in Amazon&#39;s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateFulfillmentOrderResponse</returns>
        public async System.Threading.Tasks.Task<CreateFulfillmentOrderResponse> CreateFulfillmentOrderAsync(CreateFulfillmentOrderRequest body)
        {
            ApiResponse<CreateFulfillmentOrderResponse> localVarResponse = await CreateFulfillmentOrderAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Requests that Amazon ship items from the seller&#39;s inventory in Amazon&#39;s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateFulfillmentOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateFulfillmentOrderResponse>> CreateFulfillmentOrderAsyncWithHttpInfo(CreateFulfillmentOrderRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaOutboundApi->CreateFulfillmentOrder");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFulfillmentOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFulfillmentOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFulfillmentOrderResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFulfillmentOrderResponse)));
        }

        /// <summary>
        ///  Creates a fulfillment return.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer&#39;s request to return items.</param>
        /// <returns>CreateFulfillmentReturnResponse</returns>
        public CreateFulfillmentReturnResponse CreateFulfillmentReturn(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId)
        {
            ApiResponse<CreateFulfillmentReturnResponse> localVarResponse = CreateFulfillmentReturnWithHttpInfo(body, sellerFulfillmentOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a fulfillment return.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer&#39;s request to return items.</param>
        /// <returns>ApiResponse of CreateFulfillmentReturnResponse</returns>
        public ApiResponse<CreateFulfillmentReturnResponse> CreateFulfillmentReturnWithHttpInfo(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaOutboundApi->CreateFulfillmentReturn");
            // verify the required parameter 'sellerFulfillmentOrderId' is set
            if (sellerFulfillmentOrderId == null)
                throw new ApiException(400, "Missing required parameter 'sellerFulfillmentOrderId' when calling FbaOutboundApi->CreateFulfillmentReturn");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders/{sellerFulfillmentOrderId}/return";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerFulfillmentOrderId != null) localVarPathParams.Add("sellerFulfillmentOrderId", Configuration.ApiClient.ParameterToString(sellerFulfillmentOrderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFulfillmentReturn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFulfillmentReturnResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFulfillmentReturnResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFulfillmentReturnResponse)));
        }

        /// <summary>
        ///  Creates a fulfillment return.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer&#39;s request to return items.</param>
        /// <returns>Task of CreateFulfillmentReturnResponse</returns>
        public async System.Threading.Tasks.Task<CreateFulfillmentReturnResponse> CreateFulfillmentReturnAsync(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId)
        {
            ApiResponse<CreateFulfillmentReturnResponse> localVarResponse = await CreateFulfillmentReturnAsyncWithHttpInfo(body, sellerFulfillmentOrderId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a fulfillment return.   **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer&#39;s request to return items.</param>
        /// <returns>Task of ApiResponse (CreateFulfillmentReturnResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateFulfillmentReturnResponse>> CreateFulfillmentReturnAsyncWithHttpInfo(CreateFulfillmentReturnRequest body, string sellerFulfillmentOrderId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaOutboundApi->CreateFulfillmentReturn");
            // verify the required parameter 'sellerFulfillmentOrderId' is set
            if (sellerFulfillmentOrderId == null)
                throw new ApiException(400, "Missing required parameter 'sellerFulfillmentOrderId' when calling FbaOutboundApi->CreateFulfillmentReturn");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders/{sellerFulfillmentOrderId}/return";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerFulfillmentOrderId != null) localVarPathParams.Add("sellerFulfillmentOrderId", Configuration.ApiClient.ParameterToString(sellerFulfillmentOrderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFulfillmentReturn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFulfillmentReturnResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFulfillmentReturnResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFulfillmentReturnResponse)));
        }

        /// <summary>
        ///  Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>GetFulfillmentOrderResponse</returns>
        public GetFulfillmentOrderResponse GetFulfillmentOrder(string sellerFulfillmentOrderId)
        {
            ApiResponse<GetFulfillmentOrderResponse> localVarResponse = GetFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>ApiResponse of GetFulfillmentOrderResponse</returns>
        public ApiResponse<GetFulfillmentOrderResponse> GetFulfillmentOrderWithHttpInfo(string sellerFulfillmentOrderId)
        {
            // verify the required parameter 'sellerFulfillmentOrderId' is set
            if (sellerFulfillmentOrderId == null)
                throw new ApiException(400, "Missing required parameter 'sellerFulfillmentOrderId' when calling FbaOutboundApi->GetFulfillmentOrder");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders/{sellerFulfillmentOrderId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerFulfillmentOrderId != null) localVarPathParams.Add("sellerFulfillmentOrderId", Configuration.ApiClient.ParameterToString(sellerFulfillmentOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFulfillmentOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFulfillmentOrderResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFulfillmentOrderResponse)));
        }

        /// <summary>
        ///  Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of GetFulfillmentOrderResponse</returns>
        public async System.Threading.Tasks.Task<GetFulfillmentOrderResponse> GetFulfillmentOrderAsync(string sellerFulfillmentOrderId)
        {
            ApiResponse<GetFulfillmentOrderResponse> localVarResponse = await GetFulfillmentOrderAsyncWithHttpInfo(sellerFulfillmentOrderId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of ApiResponse (GetFulfillmentOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFulfillmentOrderResponse>> GetFulfillmentOrderAsyncWithHttpInfo(string sellerFulfillmentOrderId)
        {
            // verify the required parameter 'sellerFulfillmentOrderId' is set
            if (sellerFulfillmentOrderId == null)
                throw new ApiException(400, "Missing required parameter 'sellerFulfillmentOrderId' when calling FbaOutboundApi->GetFulfillmentOrder");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders/{sellerFulfillmentOrderId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerFulfillmentOrderId != null) localVarPathParams.Add("sellerFulfillmentOrderId", Configuration.ApiClient.ParameterToString(sellerFulfillmentOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFulfillmentOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFulfillmentOrderResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFulfillmentOrderResponse)));
        }

        /// <summary>
        ///  Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GetFulfillmentPreviewResponse</returns>
        public GetFulfillmentPreviewResponse GetFulfillmentPreview(GetFulfillmentPreviewRequest body)
        {
            ApiResponse<GetFulfillmentPreviewResponse> localVarResponse = GetFulfillmentPreviewWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GetFulfillmentPreviewResponse</returns>
        public ApiResponse<GetFulfillmentPreviewResponse> GetFulfillmentPreviewWithHttpInfo(GetFulfillmentPreviewRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaOutboundApi->GetFulfillmentPreview");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders/preview";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFulfillmentPreviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFulfillmentPreviewResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFulfillmentPreviewResponse)));
        }

        /// <summary>
        ///  Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GetFulfillmentPreviewResponse</returns>
        public async System.Threading.Tasks.Task<GetFulfillmentPreviewResponse> GetFulfillmentPreviewAsync(GetFulfillmentPreviewRequest body)
        {
            ApiResponse<GetFulfillmentPreviewResponse> localVarResponse = await GetFulfillmentPreviewAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GetFulfillmentPreviewResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFulfillmentPreviewResponse>> GetFulfillmentPreviewAsyncWithHttpInfo(GetFulfillmentPreviewRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaOutboundApi->GetFulfillmentPreview");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders/preview";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFulfillmentPreviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFulfillmentPreviewResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFulfillmentPreviewResponse)));
        }

        /// <summary>
        ///  Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>GetPackageTrackingDetailsResponse</returns>
        public GetPackageTrackingDetailsResponse GetPackageTrackingDetails(int? packageNumber)
        {
            ApiResponse<GetPackageTrackingDetailsResponse> localVarResponse = GetPackageTrackingDetailsWithHttpInfo(packageNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>ApiResponse of GetPackageTrackingDetailsResponse</returns>
        public ApiResponse<GetPackageTrackingDetailsResponse> GetPackageTrackingDetailsWithHttpInfo(int? packageNumber)
        {
            // verify the required parameter 'packageNumber' is set
            if (packageNumber == null)
                throw new ApiException(400, "Missing required parameter 'packageNumber' when calling FbaOutboundApi->GetPackageTrackingDetails");

            var localVarPath = "/fba/outbound/v0/tracking";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "packageNumber", packageNumber)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackageTrackingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPackageTrackingDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPackageTrackingDetailsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPackageTrackingDetailsResponse)));
        }

        /// <summary>
        ///  Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>Task of GetPackageTrackingDetailsResponse</returns>
        public async System.Threading.Tasks.Task<GetPackageTrackingDetailsResponse> GetPackageTrackingDetailsAsync(int? packageNumber)
        {
            ApiResponse<GetPackageTrackingDetailsResponse> localVarResponse = await GetPackageTrackingDetailsAsyncWithHttpInfo(packageNumber);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageNumber">The unencrypted package identifier returned by the getFulfillmentOrder operation.</param>
        /// <returns>Task of ApiResponse (GetPackageTrackingDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPackageTrackingDetailsResponse>> GetPackageTrackingDetailsAsyncWithHttpInfo(int? packageNumber)
        {
            // verify the required parameter 'packageNumber' is set
            if (packageNumber == null)
                throw new ApiException(400, "Missing required parameter 'packageNumber' when calling FbaOutboundApi->GetPackageTrackingDetails");

            var localVarPath = "/fba/outbound/v0/tracking";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "packageNumber", packageNumber)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackageTrackingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPackageTrackingDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPackageTrackingDetailsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPackageTrackingDetailsResponse)));
        }

        /// <summary>
        ///  Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryStartDateTime">A date and time used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order. (optional)</param>
        /// <param name="fulfillmentMethod">Indicates the intended recipient channel for the order. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ListAllFulfillmentOrdersResponse</returns>
        public ListAllFulfillmentOrdersResponse ListAllFulfillmentOrders(DateTime? queryStartDateTime = null, List<string> fulfillmentMethod = null, string nextToken = null)
        {
            ApiResponse<ListAllFulfillmentOrdersResponse> localVarResponse = ListAllFulfillmentOrdersWithHttpInfo(queryStartDateTime, fulfillmentMethod, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryStartDateTime">A date and time used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order. (optional)</param>
        /// <param name="fulfillmentMethod">Indicates the intended recipient channel for the order. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ApiResponse of ListAllFulfillmentOrdersResponse</returns>
        public ApiResponse<ListAllFulfillmentOrdersResponse> ListAllFulfillmentOrdersWithHttpInfo(DateTime? queryStartDateTime = null, List<string> fulfillmentMethod = null, string nextToken = null)
        {

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queryStartDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryStartDateTime", queryStartDateTime)); // query parameter
            if (fulfillmentMethod != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "FulfillmentMethod", fulfillmentMethod)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllFulfillmentOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAllFulfillmentOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListAllFulfillmentOrdersResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAllFulfillmentOrdersResponse)));
        }

        /// <summary>
        ///  Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryStartDateTime">A date and time used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order. (optional)</param>
        /// <param name="fulfillmentMethod">Indicates the intended recipient channel for the order. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ListAllFulfillmentOrdersResponse</returns>
        public async System.Threading.Tasks.Task<ListAllFulfillmentOrdersResponse> ListAllFulfillmentOrdersAsync(DateTime? queryStartDateTime = null, List<string> fulfillmentMethod = null, string nextToken = null)
        {
            ApiResponse<ListAllFulfillmentOrdersResponse> localVarResponse = await ListAllFulfillmentOrdersAsyncWithHttpInfo(queryStartDateTime, fulfillmentMethod, nextToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryStartDateTime">A date and time used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order. (optional)</param>
        /// <param name="fulfillmentMethod">Indicates the intended recipient channel for the order. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (ListAllFulfillmentOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAllFulfillmentOrdersResponse>> ListAllFulfillmentOrdersAsyncWithHttpInfo(DateTime? queryStartDateTime = null, List<string> fulfillmentMethod = null, string nextToken = null)
        {

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queryStartDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryStartDateTime", queryStartDateTime)); // query parameter
            if (fulfillmentMethod != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "FulfillmentMethod", fulfillmentMethod)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllFulfillmentOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAllFulfillmentOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListAllFulfillmentOrdersResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAllFulfillmentOrdersResponse)));
        }

        /// <summary>
        ///  Returns a list of return reason codes for a seller SKU in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSKU">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes. (optional)</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes. (optional)</param>
        /// <returns>ListReturnReasonCodesResponse</returns>
        public ListReturnReasonCodesResponse ListReturnReasonCodes(string sellerSKU, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null)
        {
            ApiResponse<ListReturnReasonCodesResponse> localVarResponse = ListReturnReasonCodesWithHttpInfo(sellerSKU, language, marketplaceId, sellerFulfillmentOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of return reason codes for a seller SKU in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSKU">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes. (optional)</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes. (optional)</param>
        /// <returns>ApiResponse of ListReturnReasonCodesResponse</returns>
        public ApiResponse<ListReturnReasonCodesResponse> ListReturnReasonCodesWithHttpInfo(string sellerSKU, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null)
        {
            // verify the required parameter 'sellerSKU' is set
            if (sellerSKU == null)
                throw new ApiException(400, "Missing required parameter 'sellerSKU' when calling FbaOutboundApi->ListReturnReasonCodes");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling FbaOutboundApi->ListReturnReasonCodes");

            var localVarPath = "/fba/outbound/v0/returnReasonCodes";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerSKU != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "SellerSKU", sellerSKU)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (sellerFulfillmentOrderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "SellerFulfillmentOrderId", sellerFulfillmentOrderId)); // query parameter
            if (language != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Language", language)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReturnReasonCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReturnReasonCodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListReturnReasonCodesResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReturnReasonCodesResponse)));
        }

        /// <summary>
        ///  Returns a list of return reason codes for a seller SKU in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSKU">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes. (optional)</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes. (optional)</param>
        /// <returns>Task of ListReturnReasonCodesResponse</returns>
        public async System.Threading.Tasks.Task<ListReturnReasonCodesResponse> ListReturnReasonCodesAsync(string sellerSKU, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null)
        {
            ApiResponse<ListReturnReasonCodesResponse> localVarResponse = await ListReturnReasonCodesAsyncWithHttpInfo(sellerSKU, language, marketplaceId, sellerFulfillmentOrderId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of return reason codes for a seller SKU in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellerSKU">The seller SKU for which return reason codes are required.</param>
        /// <param name="language">The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into.</param>
        /// <param name="marketplaceId">The marketplace for which the seller wants return reason codes. (optional)</param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes. (optional)</param>
        /// <returns>Task of ApiResponse (ListReturnReasonCodesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListReturnReasonCodesResponse>> ListReturnReasonCodesAsyncWithHttpInfo(string sellerSKU, string language, string marketplaceId = null, string sellerFulfillmentOrderId = null)
        {
            // verify the required parameter 'sellerSKU' is set
            if (sellerSKU == null)
                throw new ApiException(400, "Missing required parameter 'sellerSKU' when calling FbaOutboundApi->ListReturnReasonCodes");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling FbaOutboundApi->ListReturnReasonCodes");

            var localVarPath = "/fba/outbound/v0/returnReasonCodes";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerSKU != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "SellerSKU", sellerSKU)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (sellerFulfillmentOrderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "SellerFulfillmentOrderId", sellerFulfillmentOrderId)); // query parameter
            if (language != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Language", language)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReturnReasonCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReturnReasonCodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListReturnReasonCodesResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReturnReasonCodesResponse)));
        }

        /// <summary>
        ///  Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>UpdateFulfillmentOrderResponse</returns>
        public UpdateFulfillmentOrderResponse UpdateFulfillmentOrder(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId)
        {
            ApiResponse<UpdateFulfillmentOrderResponse> localVarResponse = UpdateFulfillmentOrderWithHttpInfo(body, sellerFulfillmentOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>ApiResponse of UpdateFulfillmentOrderResponse</returns>
        public ApiResponse<UpdateFulfillmentOrderResponse> UpdateFulfillmentOrderWithHttpInfo(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaOutboundApi->UpdateFulfillmentOrder");
            // verify the required parameter 'sellerFulfillmentOrderId' is set
            if (sellerFulfillmentOrderId == null)
                throw new ApiException(400, "Missing required parameter 'sellerFulfillmentOrderId' when calling FbaOutboundApi->UpdateFulfillmentOrder");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders/{sellerFulfillmentOrderId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerFulfillmentOrderId != null) localVarPathParams.Add("sellerFulfillmentOrderId", Configuration.ApiClient.ParameterToString(sellerFulfillmentOrderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFulfillmentOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateFulfillmentOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateFulfillmentOrderResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateFulfillmentOrderResponse)));
        }

        /// <summary>
        ///  Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of UpdateFulfillmentOrderResponse</returns>
        public async System.Threading.Tasks.Task<UpdateFulfillmentOrderResponse> UpdateFulfillmentOrderAsync(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId)
        {
            ApiResponse<UpdateFulfillmentOrderResponse> localVarResponse = await UpdateFulfillmentOrderAsyncWithHttpInfo(body, sellerFulfillmentOrderId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="sellerFulfillmentOrderId">The identifier assigned to the item by the seller when the fulfillment order was created.</param>
        /// <returns>Task of ApiResponse (UpdateFulfillmentOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateFulfillmentOrderResponse>> UpdateFulfillmentOrderAsyncWithHttpInfo(UpdateFulfillmentOrderRequest body, string sellerFulfillmentOrderId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FbaOutboundApi->UpdateFulfillmentOrder");
            // verify the required parameter 'sellerFulfillmentOrderId' is set
            if (sellerFulfillmentOrderId == null)
                throw new ApiException(400, "Missing required parameter 'sellerFulfillmentOrderId' when calling FbaOutboundApi->UpdateFulfillmentOrder");

            var localVarPath = "/fba/outbound/v0/fulfillmentOrders/{sellerFulfillmentOrderId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerFulfillmentOrderId != null) localVarPathParams.Add("sellerFulfillmentOrderId", Configuration.ApiClient.ParameterToString(sellerFulfillmentOrderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFulfillmentOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateFulfillmentOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateFulfillmentOrderResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateFulfillmentOrderResponse)));
        }

    }
}
