/* 
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2020-09-04
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AmazonSharp.Clients;
using AmazonSharp.Models.Feeds;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace AmazonSharp.Api.Feeds
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeedsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the feed that you specify. Only feeds with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>CancelFeedResponse</returns>
        CancelFeedResponse CancelFeed(string feedId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the feed that you specify. Only feeds with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of CancelFeedResponse</returns>
        ApiResponse<CancelFeedResponse> CancelFeedWithHttpInfo(string feedId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a feed. Encrypt and upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateFeedResponse</returns>
        CreateFeedResponse CreateFeed(CreateFeedSpecification body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a feed. Encrypt and upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateFeedResponse</returns>
        ApiResponse<CreateFeedResponse> CreateFeedWithHttpInfo(CreateFeedSpecification body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a feed document for the feed type that you specify. This operation returns encryption details for encrypting the contents of the document, as well as a presigned URL for uploading the encrypted feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateFeedDocumentResponse</returns>
        CreateFeedDocumentResponse CreateFeedDocument(CreateFeedDocumentSpecification body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a feed document for the feed type that you specify. This operation returns encryption details for encrypting the contents of the document, as well as a presigned URL for uploading the encrypted feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateFeedDocumentResponse</returns>
        ApiResponse<CreateFeedDocumentResponse> CreateFeedDocumentWithHttpInfo(CreateFeedDocumentSpecification body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>GetFeedResponse</returns>
        GetFeedResponse GetFeed(string feedId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of GetFeedResponse</returns>
        ApiResponse<GetFeedResponse> GetFeedWithHttpInfo(string feedId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the information required for retrieving a feed document&#39;s contents. This includes a presigned URL for the feed document as well as the information required to decrypt the document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedDocumentId">The identifier of the feed document.</param>
        /// <returns>GetFeedDocumentResponse</returns>
        GetFeedDocumentResponse GetFeedDocument(string feedDocumentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the information required for retrieving a feed document&#39;s contents. This includes a presigned URL for the feed document as well as the information required to decrypt the document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedDocumentId">The identifier of the feed document.</param>
        /// <returns>ApiResponse of GetFeedDocumentResponse</returns>
        ApiResponse<GetFeedDocumentResponse> GetFeedDocumentWithHttpInfo(string feedDocumentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedTypes">A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of feeds to return in a single call. (optional, default to 10)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter feeds. (optional)</param>
        /// <param name="createdSince">The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>GetFeedsResponse</returns>
        GetFeedsResponse GetFeeds(List<string> feedTypes = null, List<string> marketplaceIds = null, int? pageSize = null, List<string> processingStatuses = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedTypes">A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of feeds to return in a single call. (optional, default to 10)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter feeds. (optional)</param>
        /// <param name="createdSince">The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>ApiResponse of GetFeedsResponse</returns>
        ApiResponse<GetFeedsResponse> GetFeedsWithHttpInfo(List<string> feedTypes = null, List<string> marketplaceIds = null, int? pageSize = null, List<string> processingStatuses = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the feed that you specify. Only feeds with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of CancelFeedResponse</returns>
        System.Threading.Tasks.Task<CancelFeedResponse> CancelFeedAsync(string feedId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the feed that you specify. Only feeds with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse (CancelFeedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelFeedResponse>> CancelFeedAsyncWithHttpInfo(string feedId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a feed. Encrypt and upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateFeedResponse</returns>
        System.Threading.Tasks.Task<CreateFeedResponse> CreateFeedAsync(CreateFeedSpecification body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a feed. Encrypt and upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateFeedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFeedResponse>> CreateFeedAsyncWithHttpInfo(CreateFeedSpecification body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a feed document for the feed type that you specify. This operation returns encryption details for encrypting the contents of the document, as well as a presigned URL for uploading the encrypted feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateFeedDocumentResponse</returns>
        System.Threading.Tasks.Task<CreateFeedDocumentResponse> CreateFeedDocumentAsync(CreateFeedDocumentSpecification body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a feed document for the feed type that you specify. This operation returns encryption details for encrypting the contents of the document, as well as a presigned URL for uploading the encrypted feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateFeedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFeedDocumentResponse>> CreateFeedDocumentAsyncWithHttpInfo(CreateFeedDocumentSpecification body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of GetFeedResponse</returns>
        System.Threading.Tasks.Task<GetFeedResponse> GetFeedAsync(string feedId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse (GetFeedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFeedResponse>> GetFeedAsyncWithHttpInfo(string feedId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the information required for retrieving a feed document&#39;s contents. This includes a presigned URL for the feed document as well as the information required to decrypt the document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedDocumentId">The identifier of the feed document.</param>
        /// <returns>Task of GetFeedDocumentResponse</returns>
        System.Threading.Tasks.Task<GetFeedDocumentResponse> GetFeedDocumentAsync(string feedDocumentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the information required for retrieving a feed document&#39;s contents. This includes a presigned URL for the feed document as well as the information required to decrypt the document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedDocumentId">The identifier of the feed document.</param>
        /// <returns>Task of ApiResponse (GetFeedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFeedDocumentResponse>> GetFeedDocumentAsyncWithHttpInfo(string feedDocumentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedTypes">A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of feeds to return in a single call. (optional, default to 10)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter feeds. (optional)</param>
        /// <param name="createdSince">The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>Task of GetFeedsResponse</returns>
        System.Threading.Tasks.Task<GetFeedsResponse> GetFeedsAsync(List<string> feedTypes = null, List<string> marketplaceIds = null, int? pageSize = null, List<string> processingStatuses = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedTypes">A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of feeds to return in a single call. (optional, default to 10)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter feeds. (optional)</param>
        /// <param name="createdSince">The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>Task of ApiResponse (GetFeedsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFeedsResponse>> GetFeedsAsyncWithHttpInfo(List<string> feedTypes = null, List<string> marketplaceIds = null, int? pageSize = null, List<string> processingStatuses = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeedsApi : IFeedsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeedsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeedsApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeedsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeedsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Cancels the feed that you specify. Only feeds with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>CancelFeedResponse</returns>
        public CancelFeedResponse CancelFeed(string feedId)
        {
            ApiResponse<CancelFeedResponse> localVarResponse = CancelFeedWithHttpInfo(feedId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancels the feed that you specify. Only feeds with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of CancelFeedResponse</returns>
        public ApiResponse<CancelFeedResponse> CancelFeedWithHttpInfo(string feedId)
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling FeedsApi->CancelFeed");

            var localVarPath = "/feeds/2020-09-04/feeds/{feedId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feedId", Configuration.ApiClient.ParameterToString(feedId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelFeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelFeedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelFeedResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelFeedResponse)));
        }

        /// <summary>
        ///  Cancels the feed that you specify. Only feeds with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of CancelFeedResponse</returns>
        public async System.Threading.Tasks.Task<CancelFeedResponse> CancelFeedAsync(string feedId)
        {
            ApiResponse<CancelFeedResponse> localVarResponse = await CancelFeedAsyncWithHttpInfo(feedId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancels the feed that you specify. Only feeds with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse (CancelFeedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelFeedResponse>> CancelFeedAsyncWithHttpInfo(string feedId)
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling FeedsApi->CancelFeed");

            var localVarPath = "/feeds/2020-09-04/feeds/{feedId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feedId", Configuration.ApiClient.ParameterToString(feedId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelFeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelFeedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelFeedResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelFeedResponse)));
        }

        /// <summary>
        ///  Creates a feed. Encrypt and upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateFeedResponse</returns>
        public CreateFeedResponse CreateFeed(CreateFeedSpecification body)
        {
            ApiResponse<CreateFeedResponse> localVarResponse = CreateFeedWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a feed. Encrypt and upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateFeedResponse</returns>
        public ApiResponse<CreateFeedResponse> CreateFeedWithHttpInfo(CreateFeedSpecification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FeedsApi->CreateFeed");

            var localVarPath = "/feeds/2020-09-04/feeds";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFeedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFeedResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFeedResponse)));
        }

        /// <summary>
        ///  Creates a feed. Encrypt and upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateFeedResponse</returns>
        public async System.Threading.Tasks.Task<CreateFeedResponse> CreateFeedAsync(CreateFeedSpecification body)
        {
            ApiResponse<CreateFeedResponse> localVarResponse = await CreateFeedAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a feed. Encrypt and upload the contents of the feed document before calling this operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateFeedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateFeedResponse>> CreateFeedAsyncWithHttpInfo(CreateFeedSpecification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FeedsApi->CreateFeed");

            var localVarPath = "/feeds/2020-09-04/feeds";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFeedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFeedResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFeedResponse)));
        }

        /// <summary>
        ///  Creates a feed document for the feed type that you specify. This operation returns encryption details for encrypting the contents of the document, as well as a presigned URL for uploading the encrypted feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateFeedDocumentResponse</returns>
        public CreateFeedDocumentResponse CreateFeedDocument(CreateFeedDocumentSpecification body)
        {
            ApiResponse<CreateFeedDocumentResponse> localVarResponse = CreateFeedDocumentWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a feed document for the feed type that you specify. This operation returns encryption details for encrypting the contents of the document, as well as a presigned URL for uploading the encrypted feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateFeedDocumentResponse</returns>
        public ApiResponse<CreateFeedDocumentResponse> CreateFeedDocumentWithHttpInfo(CreateFeedDocumentSpecification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FeedsApi->CreateFeedDocument");

            var localVarPath = "/feeds/2020-09-04/documents";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFeedDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFeedDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFeedDocumentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFeedDocumentResponse)));
        }

        /// <summary>
        ///  Creates a feed document for the feed type that you specify. This operation returns encryption details for encrypting the contents of the document, as well as a presigned URL for uploading the encrypted feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateFeedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<CreateFeedDocumentResponse> CreateFeedDocumentAsync(CreateFeedDocumentSpecification body)
        {
            ApiResponse<CreateFeedDocumentResponse> localVarResponse = await CreateFeedDocumentAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a feed document for the feed type that you specify. This operation returns encryption details for encrypting the contents of the document, as well as a presigned URL for uploading the encrypted feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0083 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateFeedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateFeedDocumentResponse>> CreateFeedDocumentAsyncWithHttpInfo(CreateFeedDocumentSpecification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FeedsApi->CreateFeedDocument");

            var localVarPath = "/feeds/2020-09-04/documents";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFeedDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateFeedDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateFeedDocumentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateFeedDocumentResponse)));
        }

        /// <summary>
        ///  Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>GetFeedResponse</returns>
        public GetFeedResponse GetFeed(string feedId)
        {
            ApiResponse<GetFeedResponse> localVarResponse = GetFeedWithHttpInfo(feedId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of GetFeedResponse</returns>
        public ApiResponse<GetFeedResponse> GetFeedWithHttpInfo(string feedId)
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling FeedsApi->GetFeed");

            var localVarPath = "/feeds/2020-09-04/feeds/{feedId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feedId", Configuration.ApiClient.ParameterToString(feedId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFeedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFeedResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFeedResponse)));
        }

        /// <summary>
        ///  Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of GetFeedResponse</returns>
        public async System.Threading.Tasks.Task<GetFeedResponse> GetFeedAsync(string feedId)
        {
            ApiResponse<GetFeedResponse> localVarResponse = await GetFeedAsyncWithHttpInfo(feedId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns feed details (including the resultDocumentId, if available) for the feed that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse (GetFeedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFeedResponse>> GetFeedAsyncWithHttpInfo(string feedId)
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling FeedsApi->GetFeed");

            var localVarPath = "/feeds/2020-09-04/feeds/{feedId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feedId", Configuration.ApiClient.ParameterToString(feedId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFeedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFeedResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFeedResponse)));
        }

        /// <summary>
        ///  Returns the information required for retrieving a feed document&#39;s contents. This includes a presigned URL for the feed document as well as the information required to decrypt the document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedDocumentId">The identifier of the feed document.</param>
        /// <returns>GetFeedDocumentResponse</returns>
        public GetFeedDocumentResponse GetFeedDocument(string feedDocumentId)
        {
            ApiResponse<GetFeedDocumentResponse> localVarResponse = GetFeedDocumentWithHttpInfo(feedDocumentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the information required for retrieving a feed document&#39;s contents. This includes a presigned URL for the feed document as well as the information required to decrypt the document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedDocumentId">The identifier of the feed document.</param>
        /// <returns>ApiResponse of GetFeedDocumentResponse</returns>
        public ApiResponse<GetFeedDocumentResponse> GetFeedDocumentWithHttpInfo(string feedDocumentId)
        {
            // verify the required parameter 'feedDocumentId' is set
            if (feedDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'feedDocumentId' when calling FeedsApi->GetFeedDocument");

            var localVarPath = "/feeds/2020-09-04/documents/{feedDocumentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedDocumentId != null) localVarPathParams.Add("feedDocumentId", Configuration.ApiClient.ParameterToString(feedDocumentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeedDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFeedDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFeedDocumentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFeedDocumentResponse)));
        }

        /// <summary>
        ///  Returns the information required for retrieving a feed document&#39;s contents. This includes a presigned URL for the feed document as well as the information required to decrypt the document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedDocumentId">The identifier of the feed document.</param>
        /// <returns>Task of GetFeedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetFeedDocumentResponse> GetFeedDocumentAsync(string feedDocumentId)
        {
            ApiResponse<GetFeedDocumentResponse> localVarResponse = await GetFeedDocumentAsyncWithHttpInfo(feedDocumentId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the information required for retrieving a feed document&#39;s contents. This includes a presigned URL for the feed document as well as the information required to decrypt the document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedDocumentId">The identifier of the feed document.</param>
        /// <returns>Task of ApiResponse (GetFeedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFeedDocumentResponse>> GetFeedDocumentAsyncWithHttpInfo(string feedDocumentId)
        {
            // verify the required parameter 'feedDocumentId' is set
            if (feedDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'feedDocumentId' when calling FeedsApi->GetFeedDocument");

            var localVarPath = "/feeds/2020-09-04/documents/{feedDocumentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedDocumentId != null) localVarPathParams.Add("feedDocumentId", Configuration.ApiClient.ParameterToString(feedDocumentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeedDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFeedDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFeedDocumentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFeedDocumentResponse)));
        }

        /// <summary>
        ///  Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedTypes">A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of feeds to return in a single call. (optional, default to 10)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter feeds. (optional)</param>
        /// <param name="createdSince">The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>GetFeedsResponse</returns>
        public GetFeedsResponse GetFeeds(List<string> feedTypes = null, List<string> marketplaceIds = null, int? pageSize = null, List<string> processingStatuses = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null)
        {
            ApiResponse<GetFeedsResponse> localVarResponse = GetFeedsWithHttpInfo(feedTypes, marketplaceIds, pageSize, processingStatuses, createdSince, createdUntil, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedTypes">A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of feeds to return in a single call. (optional, default to 10)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter feeds. (optional)</param>
        /// <param name="createdSince">The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>ApiResponse of GetFeedsResponse</returns>
        public ApiResponse<GetFeedsResponse> GetFeedsWithHttpInfo(List<string> feedTypes = null, List<string> marketplaceIds = null, int? pageSize = null, List<string> processingStatuses = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null)
        {

            var localVarPath = "/feeds/2020-09-04/feeds";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedTypes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "feedTypes", feedTypes)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (processingStatuses != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "processingStatuses", processingStatuses)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter
            if (createdUntil != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdUntil", createdUntil)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeeds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFeedsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFeedsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFeedsResponse)));
        }

        /// <summary>
        ///  Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedTypes">A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of feeds to return in a single call. (optional, default to 10)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter feeds. (optional)</param>
        /// <param name="createdSince">The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>Task of GetFeedsResponse</returns>
        public async System.Threading.Tasks.Task<GetFeedsResponse> GetFeedsAsync(List<string> feedTypes = null, List<string> marketplaceIds = null, int? pageSize = null, List<string> processingStatuses = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null)
        {
            ApiResponse<GetFeedsResponse> localVarResponse = await GetFeedsAsyncWithHttpInfo(feedTypes, marketplaceIds, pageSize, processingStatuses, createdSince, createdUntil, nextToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns feed details for the feeds that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedTypes">A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of feeds to return in a single call. (optional, default to 10)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter feeds. (optional)</param>
        /// <param name="createdSince">The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>Task of ApiResponse (GetFeedsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFeedsResponse>> GetFeedsAsyncWithHttpInfo(List<string> feedTypes = null, List<string> marketplaceIds = null, int? pageSize = null, List<string> processingStatuses = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null)
        {

            var localVarPath = "/feeds/2020-09-04/feeds";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedTypes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "feedTypes", feedTypes)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (processingStatuses != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "processingStatuses", processingStatuses)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter
            if (createdUntil != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdUntil", createdUntil)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeeds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFeedsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFeedsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFeedsResponse)));
        }

    }
}
