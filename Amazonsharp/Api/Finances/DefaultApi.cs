/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AmazonSharp.Clients;
using AmazonSharp.Models.Finances;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace AmazonSharp.Api.Finances
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. (optional)</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ListFinancialEventGroupsResponse</returns>
        ListFinancialEventGroupsResponse ListFinancialEventGroups(int? maxResultsPerPage = null, DateTime? financialEventGroupStartedBefore = null, DateTime? financialEventGroupStartedAfter = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. (optional)</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of ListFinancialEventGroupsResponse</returns>
        ApiResponse<ListFinancialEventGroupsResponse> ListFinancialEventGroupsWithHttpInfo(int? maxResultsPerPage = null, DateTime? financialEventGroupStartedBefore = null, DateTime? financialEventGroupStartedAfter = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. (optional)</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ListFinancialEventsResponse</returns>
        ListFinancialEventsResponse ListFinancialEvents(int? maxResultsPerPage = null, DateTime? postedAfter = null, DateTime? postedBefore = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. (optional)</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of ListFinancialEventsResponse</returns>
        ApiResponse<ListFinancialEventsResponse> ListFinancialEventsWithHttpInfo(int? maxResultsPerPage = null, DateTime? postedAfter = null, DateTime? postedBefore = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ListFinancialEventsResponse</returns>
        ListFinancialEventsResponse ListFinancialEventsByGroupId(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of ListFinancialEventsResponse</returns>
        ApiResponse<ListFinancialEventsResponse> ListFinancialEventsByGroupIdWithHttpInfo(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ListFinancialEventsResponse</returns>
        ListFinancialEventsResponse ListFinancialEventsByOrderId(string orderId, int? maxResultsPerPage = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of ListFinancialEventsResponse</returns>
        ApiResponse<ListFinancialEventsResponse> ListFinancialEventsByOrderIdWithHttpInfo(string orderId, int? maxResultsPerPage = null, string nextToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. (optional)</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ListFinancialEventGroupsResponse</returns>
        System.Threading.Tasks.Task<ListFinancialEventGroupsResponse> ListFinancialEventGroupsAsync(int? maxResultsPerPage = null, DateTime? financialEventGroupStartedBefore = null, DateTime? financialEventGroupStartedAfter = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. (optional)</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (ListFinancialEventGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFinancialEventGroupsResponse>> ListFinancialEventGroupsAsyncWithHttpInfo(int? maxResultsPerPage = null, DateTime? financialEventGroupStartedBefore = null, DateTime? financialEventGroupStartedAfter = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. (optional)</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ListFinancialEventsResponse</returns>
        System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsAsync(int? maxResultsPerPage = null, DateTime? postedAfter = null, DateTime? postedBefore = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. (optional)</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (ListFinancialEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFinancialEventsResponse>> ListFinancialEventsAsyncWithHttpInfo(int? maxResultsPerPage = null, DateTime? postedAfter = null, DateTime? postedBefore = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ListFinancialEventsResponse</returns>
        System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsByGroupIdAsync(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (ListFinancialEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFinancialEventsResponse>> ListFinancialEventsByGroupIdAsyncWithHttpInfo(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ListFinancialEventsResponse</returns>
        System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsByOrderIdAsync(string orderId, int? maxResultsPerPage = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (ListFinancialEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFinancialEventsResponse>> ListFinancialEventsByOrderIdAsyncWithHttpInfo(string orderId, int? maxResultsPerPage = null, string nextToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. (optional)</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ListFinancialEventGroupsResponse</returns>
        public ListFinancialEventGroupsResponse ListFinancialEventGroups(int? maxResultsPerPage = null, DateTime? financialEventGroupStartedBefore = null, DateTime? financialEventGroupStartedAfter = null, string nextToken = null)
        {
            ApiResponse<ListFinancialEventGroupsResponse> localVarResponse = ListFinancialEventGroupsWithHttpInfo(maxResultsPerPage, financialEventGroupStartedBefore, financialEventGroupStartedAfter, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. (optional)</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of ListFinancialEventGroupsResponse</returns>
        public ApiResponse<ListFinancialEventGroupsResponse> ListFinancialEventGroupsWithHttpInfo(int? maxResultsPerPage = null, DateTime? financialEventGroupStartedBefore = null, DateTime? financialEventGroupStartedAfter = null, string nextToken = null)
        {

            var localVarPath = "/finances/v0/financialEventGroups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxResultsPerPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxResultsPerPage", maxResultsPerPage)); // query parameter
            if (financialEventGroupStartedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "FinancialEventGroupStartedBefore", financialEventGroupStartedBefore)); // query parameter
            if (financialEventGroupStartedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "FinancialEventGroupStartedAfter", financialEventGroupStartedAfter)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFinancialEventGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFinancialEventGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListFinancialEventGroupsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFinancialEventGroupsResponse)));
        }

        /// <summary>
        ///  Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. (optional)</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ListFinancialEventGroupsResponse</returns>
        public async System.Threading.Tasks.Task<ListFinancialEventGroupsResponse> ListFinancialEventGroupsAsync(int? maxResultsPerPage = null, DateTime? financialEventGroupStartedBefore = null, DateTime? financialEventGroupStartedAfter = null, string nextToken = null)
        {
            ApiResponse<ListFinancialEventGroupsResponse> localVarResponse = await ListFinancialEventGroupsAsyncWithHttpInfo(maxResultsPerPage, financialEventGroupStartedBefore, financialEventGroupStartedAfter, nextToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="financialEventGroupStartedBefore">A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. (optional)</param>
        /// <param name="financialEventGroupStartedAfter">A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (ListFinancialEventGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListFinancialEventGroupsResponse>> ListFinancialEventGroupsAsyncWithHttpInfo(int? maxResultsPerPage = null, DateTime? financialEventGroupStartedBefore = null, DateTime? financialEventGroupStartedAfter = null, string nextToken = null)
        {

            var localVarPath = "/finances/v0/financialEventGroups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxResultsPerPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxResultsPerPage", maxResultsPerPage)); // query parameter
            if (financialEventGroupStartedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "FinancialEventGroupStartedBefore", financialEventGroupStartedBefore)); // query parameter
            if (financialEventGroupStartedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "FinancialEventGroupStartedAfter", financialEventGroupStartedAfter)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFinancialEventGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFinancialEventGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListFinancialEventGroupsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFinancialEventGroupsResponse)));
        }

        /// <summary>
        ///  Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. (optional)</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ListFinancialEventsResponse</returns>
        public ListFinancialEventsResponse ListFinancialEvents(int? maxResultsPerPage = null, DateTime? postedAfter = null, DateTime? postedBefore = null, string nextToken = null)
        {
            ApiResponse<ListFinancialEventsResponse> localVarResponse = ListFinancialEventsWithHttpInfo(maxResultsPerPage, postedAfter, postedBefore, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. (optional)</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of ListFinancialEventsResponse</returns>
        public ApiResponse<ListFinancialEventsResponse> ListFinancialEventsWithHttpInfo(int? maxResultsPerPage = null, DateTime? postedAfter = null, DateTime? postedBefore = null, string nextToken = null)
        {

            var localVarPath = "/finances/v0/financialEvents";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxResultsPerPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxResultsPerPage", maxResultsPerPage)); // query parameter
            if (postedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PostedAfter", postedAfter)); // query parameter
            if (postedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PostedBefore", postedBefore)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFinancialEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFinancialEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListFinancialEventsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFinancialEventsResponse)));
        }

        /// <summary>
        ///  Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. (optional)</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ListFinancialEventsResponse</returns>
        public async System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsAsync(int? maxResultsPerPage = null, DateTime? postedAfter = null, DateTime? postedBefore = null, string nextToken = null)
        {
            ApiResponse<ListFinancialEventsResponse> localVarResponse = await ListFinancialEventsAsyncWithHttpInfo(maxResultsPerPage, postedAfter, postedBefore, nextToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="postedAfter">A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. (optional)</param>
        /// <param name="postedBefore">A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. (optional)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (ListFinancialEventsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListFinancialEventsResponse>> ListFinancialEventsAsyncWithHttpInfo(int? maxResultsPerPage = null, DateTime? postedAfter = null, DateTime? postedBefore = null, string nextToken = null)
        {

            var localVarPath = "/finances/v0/financialEvents";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxResultsPerPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxResultsPerPage", maxResultsPerPage)); // query parameter
            if (postedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PostedAfter", postedAfter)); // query parameter
            if (postedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "PostedBefore", postedBefore)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFinancialEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFinancialEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListFinancialEventsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFinancialEventsResponse)));
        }

        /// <summary>
        ///  Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ListFinancialEventsResponse</returns>
        public ListFinancialEventsResponse ListFinancialEventsByGroupId(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null)
        {
            ApiResponse<ListFinancialEventsResponse> localVarResponse = ListFinancialEventsByGroupIdWithHttpInfo(eventGroupId, maxResultsPerPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of ListFinancialEventsResponse</returns>
        public ApiResponse<ListFinancialEventsResponse> ListFinancialEventsByGroupIdWithHttpInfo(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null)
        {
            // verify the required parameter 'eventGroupId' is set
            if (eventGroupId == null)
                throw new ApiException(400, "Missing required parameter 'eventGroupId' when calling DefaultApi->ListFinancialEventsByGroupId");

            var localVarPath = "/finances/v0/financialEventGroups/{eventGroupId}/financialEvents";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventGroupId != null) localVarPathParams.Add("eventGroupId", Configuration.ApiClient.ParameterToString(eventGroupId)); // path parameter
            if (maxResultsPerPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxResultsPerPage", maxResultsPerPage)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFinancialEventsByGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFinancialEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListFinancialEventsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFinancialEventsResponse)));
        }

        /// <summary>
        ///  Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ListFinancialEventsResponse</returns>
        public async System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsByGroupIdAsync(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null)
        {
            ApiResponse<ListFinancialEventsResponse> localVarResponse = await ListFinancialEventsByGroupIdAsyncWithHttpInfo(eventGroupId, maxResultsPerPage, nextToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventGroupId">The identifier of the financial event group to which the events belong.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (ListFinancialEventsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListFinancialEventsResponse>> ListFinancialEventsByGroupIdAsyncWithHttpInfo(string eventGroupId, int? maxResultsPerPage = null, string nextToken = null)
        {
            // verify the required parameter 'eventGroupId' is set
            if (eventGroupId == null)
                throw new ApiException(400, "Missing required parameter 'eventGroupId' when calling DefaultApi->ListFinancialEventsByGroupId");

            var localVarPath = "/finances/v0/financialEventGroups/{eventGroupId}/financialEvents";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventGroupId != null) localVarPathParams.Add("eventGroupId", Configuration.ApiClient.ParameterToString(eventGroupId)); // path parameter
            if (maxResultsPerPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxResultsPerPage", maxResultsPerPage)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFinancialEventsByGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFinancialEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListFinancialEventsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFinancialEventsResponse)));
        }

        /// <summary>
        ///  Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ListFinancialEventsResponse</returns>
        public ListFinancialEventsResponse ListFinancialEventsByOrderId(string orderId, int? maxResultsPerPage = null, string nextToken = null)
        {
            ApiResponse<ListFinancialEventsResponse> localVarResponse = ListFinancialEventsByOrderIdWithHttpInfo(orderId, maxResultsPerPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>ApiResponse of ListFinancialEventsResponse</returns>
        public ApiResponse<ListFinancialEventsResponse> ListFinancialEventsByOrderIdWithHttpInfo(string orderId, int? maxResultsPerPage = null, string nextToken = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DefaultApi->ListFinancialEventsByOrderId");

            var localVarPath = "/finances/v0/orders/{orderId}/financialEvents";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (maxResultsPerPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxResultsPerPage", maxResultsPerPage)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFinancialEventsByOrderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFinancialEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListFinancialEventsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFinancialEventsResponse)));
        }

        /// <summary>
        ///  Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ListFinancialEventsResponse</returns>
        public async System.Threading.Tasks.Task<ListFinancialEventsResponse> ListFinancialEventsByOrderIdAsync(string orderId, int? maxResultsPerPage = null, string nextToken = null)
        {
            ApiResponse<ListFinancialEventsResponse> localVarResponse = await ListFinancialEventsByOrderIdAsyncWithHttpInfo(orderId, maxResultsPerPage, nextToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">An Amazon-defined order identifier, in 3-7-7 format.</param>
        /// <param name="maxResultsPerPage">The maximum number of results to return per page. (optional, default to 100)</param>
        /// <param name="nextToken">A string token returned in the response of your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (ListFinancialEventsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListFinancialEventsResponse>> ListFinancialEventsByOrderIdAsyncWithHttpInfo(string orderId, int? maxResultsPerPage = null, string nextToken = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DefaultApi->ListFinancialEventsByOrderId");

            var localVarPath = "/finances/v0/orders/{orderId}/financialEvents";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (maxResultsPerPage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxResultsPerPage", maxResultsPerPage)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFinancialEventsByOrderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFinancialEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListFinancialEventsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFinancialEventsResponse)));
        }

    }
}
