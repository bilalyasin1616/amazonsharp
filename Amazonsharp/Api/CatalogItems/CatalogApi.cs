/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AmazonSharp.Clients;
using AmazonSharp.Models.CatalogItems;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace AmazonSharp.Api.CatalogItems
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>GetCatalogItemResponse</returns>
        GetCatalogItemResponse GetCatalogItem(string marketplaceId, string asin);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>ApiResponse of GetCatalogItemResponse</returns>
        ApiResponse<GetCatalogItemResponse> GetCatalogItemWithHttpInfo(string marketplaceId, string asin);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="ASIN">The Amazon Standard Identification Number (ASIN) of the item. (optional)</param>
        /// <param name="sellerSKU">Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <returns>ListCatalogCategoriesResponse</returns>
        ListCatalogCategoriesResponse ListCatalogCategories(string marketplaceId, string ASIN = null, string sellerSKU = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="ASIN">The Amazon Standard Identification Number (ASIN) of the item. (optional)</param>
        /// <param name="sellerSKU">Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <returns>ApiResponse of ListCatalogCategoriesResponse</returns>
        ApiResponse<ListCatalogCategoriesResponse> ListCatalogCategoriesWithHttpInfo(string marketplaceId, string ASIN = null, string sellerSKU = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <param name="query">Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)</param>
        /// <param name="queryContextId">An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)</param>
        /// <param name="sellerSKU">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <param name="UPC">A 12-digit bar code used for retail packaging. (optional)</param>
        /// <param name="EAN">A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)</param>
        /// <param name="ISBN">The unique commercial book identifier used to identify books internationally. (optional)</param>
        /// <param name="JAN">A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)</param>
        /// <returns>ListCatalogItemsResponse</returns>
        ListCatalogItemsResponse ListCatalogItems(string marketplaceId, string query = null, string queryContextId = null, string sellerSKU = null, string UPC = null, string EAN = null, string ISBN = null, string JAN = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <param name="query">Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)</param>
        /// <param name="queryContextId">An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)</param>
        /// <param name="sellerSKU">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <param name="UPC">A 12-digit bar code used for retail packaging. (optional)</param>
        /// <param name="EAN">A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)</param>
        /// <param name="ISBN">The unique commercial book identifier used to identify books internationally. (optional)</param>
        /// <param name="JAN">A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)</param>
        /// <returns>ApiResponse of ListCatalogItemsResponse</returns>
        ApiResponse<ListCatalogItemsResponse> ListCatalogItemsWithHttpInfo(string marketplaceId, string query = null, string queryContextId = null, string sellerSKU = null, string UPC = null, string EAN = null, string ISBN = null, string JAN = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>Task of GetCatalogItemResponse</returns>
        System.Threading.Tasks.Task<GetCatalogItemResponse> GetCatalogItemAsync(string marketplaceId, string asin);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>Task of ApiResponse (GetCatalogItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCatalogItemResponse>> GetCatalogItemAsyncWithHttpInfo(string marketplaceId, string asin);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="ASIN">The Amazon Standard Identification Number (ASIN) of the item. (optional)</param>
        /// <param name="sellerSKU">Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <returns>Task of ListCatalogCategoriesResponse</returns>
        System.Threading.Tasks.Task<ListCatalogCategoriesResponse> ListCatalogCategoriesAsync(string marketplaceId, string ASIN = null, string sellerSKU = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="ASIN">The Amazon Standard Identification Number (ASIN) of the item. (optional)</param>
        /// <param name="sellerSKU">Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <returns>Task of ApiResponse (ListCatalogCategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCatalogCategoriesResponse>> ListCatalogCategoriesAsyncWithHttpInfo(string marketplaceId, string ASIN = null, string sellerSKU = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <param name="query">Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)</param>
        /// <param name="queryContextId">An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)</param>
        /// <param name="sellerSKU">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <param name="UPC">A 12-digit bar code used for retail packaging. (optional)</param>
        /// <param name="EAN">A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)</param>
        /// <param name="ISBN">The unique commercial book identifier used to identify books internationally. (optional)</param>
        /// <param name="JAN">A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)</param>
        /// <returns>Task of ListCatalogItemsResponse</returns>
        System.Threading.Tasks.Task<ListCatalogItemsResponse> ListCatalogItemsAsync(string marketplaceId, string query = null, string queryContextId = null, string sellerSKU = null, string UPC = null, string EAN = null, string ISBN = null, string JAN = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <param name="query">Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)</param>
        /// <param name="queryContextId">An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)</param>
        /// <param name="sellerSKU">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <param name="UPC">A 12-digit bar code used for retail packaging. (optional)</param>
        /// <param name="EAN">A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)</param>
        /// <param name="ISBN">The unique commercial book identifier used to identify books internationally. (optional)</param>
        /// <param name="JAN">A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)</param>
        /// <returns>Task of ApiResponse (ListCatalogItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCatalogItemsResponse>> ListCatalogItemsAsyncWithHttpInfo(string marketplaceId, string query = null, string queryContextId = null, string sellerSKU = null, string UPC = null, string EAN = null, string ISBN = null, string JAN = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogApi : ICatalogApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>GetCatalogItemResponse</returns>
        public GetCatalogItemResponse GetCatalogItem(string marketplaceId, string asin)
        {
            ApiResponse<GetCatalogItemResponse> localVarResponse = GetCatalogItemWithHttpInfo(marketplaceId, asin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>ApiResponse of GetCatalogItemResponse</returns>
        public ApiResponse<GetCatalogItemResponse> GetCatalogItemWithHttpInfo(string marketplaceId, string asin)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CatalogApi->GetCatalogItem");
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CatalogApi->GetCatalogItem");

            var localVarPath = "/catalog/v0/items/{asin}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCatalogItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCatalogItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCatalogItemResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCatalogItemResponse)));
        }

        /// <summary>
        ///  Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>Task of GetCatalogItemResponse</returns>
        public async System.Threading.Tasks.Task<GetCatalogItemResponse> GetCatalogItemAsync(string marketplaceId, string asin)
        {
            ApiResponse<GetCatalogItemResponse> localVarResponse = await GetCatalogItemAsyncWithHttpInfo(marketplaceId, asin);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <returns>Task of ApiResponse (GetCatalogItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCatalogItemResponse>> GetCatalogItemAsyncWithHttpInfo(string marketplaceId, string asin)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CatalogApi->GetCatalogItem");
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CatalogApi->GetCatalogItem");

            var localVarPath = "/catalog/v0/items/{asin}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCatalogItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCatalogItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCatalogItemResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCatalogItemResponse)));
        }

        /// <summary>
        ///  Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="ASIN">The Amazon Standard Identification Number (ASIN) of the item. (optional)</param>
        /// <param name="sellerSKU">Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <returns>ListCatalogCategoriesResponse</returns>
        public ListCatalogCategoriesResponse ListCatalogCategories(string marketplaceId, string ASIN = null, string sellerSKU = null)
        {
            ApiResponse<ListCatalogCategoriesResponse> localVarResponse = ListCatalogCategoriesWithHttpInfo(marketplaceId, ASIN, sellerSKU);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="ASIN">The Amazon Standard Identification Number (ASIN) of the item. (optional)</param>
        /// <param name="sellerSKU">Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <returns>ApiResponse of ListCatalogCategoriesResponse</returns>
        public ApiResponse<ListCatalogCategoriesResponse> ListCatalogCategoriesWithHttpInfo(string marketplaceId, string ASIN = null, string sellerSKU = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CatalogApi->ListCatalogCategories");

            var localVarPath = "/catalog/v0/categories";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (ASIN != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ASIN", ASIN)); // query parameter
            if (sellerSKU != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "SellerSKU", sellerSKU)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCatalogCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCatalogCategoriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListCatalogCategoriesResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCatalogCategoriesResponse)));
        }

        /// <summary>
        ///  Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="ASIN">The Amazon Standard Identification Number (ASIN) of the item. (optional)</param>
        /// <param name="sellerSKU">Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <returns>Task of ListCatalogCategoriesResponse</returns>
        public async System.Threading.Tasks.Task<ListCatalogCategoriesResponse> ListCatalogCategoriesAsync(string marketplaceId, string ASIN = null, string sellerSKU = null)
        {
            ApiResponse<ListCatalogCategoriesResponse> localVarResponse = await ListCatalogCategoriesAsyncWithHttpInfo(marketplaceId, ASIN, sellerSKU);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for the item.</param>
        /// <param name="ASIN">The Amazon Standard Identification Number (ASIN) of the item. (optional)</param>
        /// <param name="sellerSKU">Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <returns>Task of ApiResponse (ListCatalogCategoriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCatalogCategoriesResponse>> ListCatalogCategoriesAsyncWithHttpInfo(string marketplaceId, string ASIN = null, string sellerSKU = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CatalogApi->ListCatalogCategories");

            var localVarPath = "/catalog/v0/categories";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (ASIN != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ASIN", ASIN)); // query parameter
            if (sellerSKU != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "SellerSKU", sellerSKU)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCatalogCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCatalogCategoriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListCatalogCategoriesResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCatalogCategoriesResponse)));
        }

        /// <summary>
        ///  Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <param name="query">Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)</param>
        /// <param name="queryContextId">An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)</param>
        /// <param name="sellerSKU">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <param name="UPC">A 12-digit bar code used for retail packaging. (optional)</param>
        /// <param name="EAN">A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)</param>
        /// <param name="ISBN">The unique commercial book identifier used to identify books internationally. (optional)</param>
        /// <param name="JAN">A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)</param>
        /// <returns>ListCatalogItemsResponse</returns>
        public ListCatalogItemsResponse ListCatalogItems(string marketplaceId, string query = null, string queryContextId = null, string sellerSKU = null, string UPC = null, string EAN = null, string ISBN = null, string JAN = null)
        {
            ApiResponse<ListCatalogItemsResponse> localVarResponse = ListCatalogItemsWithHttpInfo(marketplaceId, query, queryContextId, sellerSKU, UPC, EAN, ISBN, JAN);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <param name="query">Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)</param>
        /// <param name="queryContextId">An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)</param>
        /// <param name="sellerSKU">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <param name="UPC">A 12-digit bar code used for retail packaging. (optional)</param>
        /// <param name="EAN">A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)</param>
        /// <param name="ISBN">The unique commercial book identifier used to identify books internationally. (optional)</param>
        /// <param name="JAN">A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)</param>
        /// <returns>ApiResponse of ListCatalogItemsResponse</returns>
        public ApiResponse<ListCatalogItemsResponse> ListCatalogItemsWithHttpInfo(string marketplaceId, string query = null, string queryContextId = null, string sellerSKU = null, string UPC = null, string EAN = null, string ISBN = null, string JAN = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CatalogApi->ListCatalogItems");

            var localVarPath = "/catalog/v0/items";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Query", query)); // query parameter
            if (queryContextId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryContextId", queryContextId)); // query parameter
            if (sellerSKU != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "SellerSKU", sellerSKU)); // query parameter
            if (UPC != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UPC", UPC)); // query parameter
            if (EAN != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EAN", EAN)); // query parameter
            if (ISBN != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ISBN", ISBN)); // query parameter
            if (JAN != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "JAN", JAN)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCatalogItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCatalogItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListCatalogItemsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCatalogItemsResponse)));
        }

        /// <summary>
        ///  Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <param name="query">Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)</param>
        /// <param name="queryContextId">An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)</param>
        /// <param name="sellerSKU">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <param name="UPC">A 12-digit bar code used for retail packaging. (optional)</param>
        /// <param name="EAN">A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)</param>
        /// <param name="ISBN">The unique commercial book identifier used to identify books internationally. (optional)</param>
        /// <param name="JAN">A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)</param>
        /// <returns>Task of ListCatalogItemsResponse</returns>
        public async System.Threading.Tasks.Task<ListCatalogItemsResponse> ListCatalogItemsAsync(string marketplaceId, string query = null, string queryContextId = null, string sellerSKU = null, string UPC = null, string EAN = null, string ISBN = null, string JAN = null)
        {
            ApiResponse<ListCatalogItemsResponse> localVarResponse = await ListCatalogItemsAsyncWithHttpInfo(marketplaceId, query, queryContextId, sellerSKU, UPC, EAN, ISBN, JAN);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <param name="query">Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)</param>
        /// <param name="queryContextId">An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)</param>
        /// <param name="sellerSKU">Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)</param>
        /// <param name="UPC">A 12-digit bar code used for retail packaging. (optional)</param>
        /// <param name="EAN">A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)</param>
        /// <param name="ISBN">The unique commercial book identifier used to identify books internationally. (optional)</param>
        /// <param name="JAN">A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)</param>
        /// <returns>Task of ApiResponse (ListCatalogItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCatalogItemsResponse>> ListCatalogItemsAsyncWithHttpInfo(string marketplaceId, string query = null, string queryContextId = null, string sellerSKU = null, string UPC = null, string EAN = null, string ISBN = null, string JAN = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling CatalogApi->ListCatalogItems");

            var localVarPath = "/catalog/v0/items";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Query", query)); // query parameter
            if (queryContextId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryContextId", queryContextId)); // query parameter
            if (sellerSKU != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "SellerSKU", sellerSKU)); // query parameter
            if (UPC != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UPC", UPC)); // query parameter
            if (EAN != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EAN", EAN)); // query parameter
            if (ISBN != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ISBN", ISBN)); // query parameter
            if (JAN != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "JAN", JAN)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCatalogItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCatalogItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListCatalogItemsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCatalogItemsResponse)));
        }

    }
}
