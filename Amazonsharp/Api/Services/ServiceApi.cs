/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AmazonSharp.Clients;
using AmazonSharp.Models.Services;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace AmazonSharp.Api.Services
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>SetAppointmentResponse</returns>
        SetAppointmentResponse AddAppointmentForServiceJobByServiceJobId(string serviceJobId, AddAppointmentRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>ApiResponse of SetAppointmentResponse</returns>
        ApiResponse<SetAppointmentResponse> AddAppointmentForServiceJobByServiceJobIdWithHttpInfo(string serviceJobId, AddAppointmentRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>CancelServiceJobByServiceJobIdResponse</returns>
        CancelServiceJobByServiceJobIdResponse CancelServiceJobByServiceJobId(string serviceJobId, string cancellationReasonCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>ApiResponse of CancelServiceJobByServiceJobIdResponse</returns>
        ApiResponse<CancelServiceJobByServiceJobIdResponse> CancelServiceJobByServiceJobIdWithHttpInfo(string serviceJobId, string cancellationReasonCode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>CompleteServiceJobByServiceJobIdResponse</returns>
        CompleteServiceJobByServiceJobIdResponse CompleteServiceJobByServiceJobId(string serviceJobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>ApiResponse of CompleteServiceJobByServiceJobIdResponse</returns>
        ApiResponse<CompleteServiceJobByServiceJobIdResponse> CompleteServiceJobByServiceJobIdWithHttpInfo(string serviceJobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>GetServiceJobByServiceJobIdResponse</returns>
        GetServiceJobByServiceJobIdResponse GetServiceJobByServiceJobId(string serviceJobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>ApiResponse of GetServiceJobByServiceJobIdResponse</returns>
        ApiResponse<GetServiceJobByServiceJobIdResponse> GetServiceJobByServiceJobIdWithHttpInfo(string serviceJobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces. </param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20.  (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.  (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">sort order for the query you want to perform.  (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <returns>GetServiceJobsResponse</returns>
        GetServiceJobsResponse GetServiceJobs(List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces. </param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20.  (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.  (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">sort order for the query you want to perform.  (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <returns>ApiResponse of GetServiceJobsResponse</returns>
        ApiResponse<GetServiceJobsResponse> GetServiceJobsWithHttpInfo(List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>SetAppointmentResponse</returns>
        SetAppointmentResponse RescheduleAppointmentForServiceJobByServiceJobId(string serviceJobId, string appointmentId, RescheduleAppointmentRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>ApiResponse of SetAppointmentResponse</returns>
        ApiResponse<SetAppointmentResponse> RescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(string serviceJobId, string appointmentId, RescheduleAppointmentRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>Task of SetAppointmentResponse</returns>
        System.Threading.Tasks.Task<SetAppointmentResponse> AddAppointmentForServiceJobByServiceJobIdAsync(string serviceJobId, AddAppointmentRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>Task of ApiResponse (SetAppointmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetAppointmentResponse>> AddAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo(string serviceJobId, AddAppointmentRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>Task of CancelServiceJobByServiceJobIdResponse</returns>
        System.Threading.Tasks.Task<CancelServiceJobByServiceJobIdResponse> CancelServiceJobByServiceJobIdAsync(string serviceJobId, string cancellationReasonCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>Task of ApiResponse (CancelServiceJobByServiceJobIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelServiceJobByServiceJobIdResponse>> CancelServiceJobByServiceJobIdAsyncWithHttpInfo(string serviceJobId, string cancellationReasonCode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>Task of CompleteServiceJobByServiceJobIdResponse</returns>
        System.Threading.Tasks.Task<CompleteServiceJobByServiceJobIdResponse> CompleteServiceJobByServiceJobIdAsync(string serviceJobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>Task of ApiResponse (CompleteServiceJobByServiceJobIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompleteServiceJobByServiceJobIdResponse>> CompleteServiceJobByServiceJobIdAsyncWithHttpInfo(string serviceJobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>Task of GetServiceJobByServiceJobIdResponse</returns>
        System.Threading.Tasks.Task<GetServiceJobByServiceJobIdResponse> GetServiceJobByServiceJobIdAsync(string serviceJobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>Task of ApiResponse (GetServiceJobByServiceJobIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServiceJobByServiceJobIdResponse>> GetServiceJobByServiceJobIdAsyncWithHttpInfo(string serviceJobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces. </param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20.  (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.  (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">sort order for the query you want to perform.  (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <returns>Task of GetServiceJobsResponse</returns>
        System.Threading.Tasks.Task<GetServiceJobsResponse> GetServiceJobsAsync(List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces. </param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20.  (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.  (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">sort order for the query you want to perform.  (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <returns>Task of ApiResponse (GetServiceJobsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServiceJobsResponse>> GetServiceJobsAsyncWithHttpInfo(List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>Task of SetAppointmentResponse</returns>
        System.Threading.Tasks.Task<SetAppointmentResponse> RescheduleAppointmentForServiceJobByServiceJobIdAsync(string serviceJobId, string appointmentId, RescheduleAppointmentRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>Task of ApiResponse (SetAppointmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetAppointmentResponse>> RescheduleAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo(string serviceJobId, string appointmentId, RescheduleAppointmentRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServiceApi : IServiceApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>SetAppointmentResponse</returns>
        public SetAppointmentResponse AddAppointmentForServiceJobByServiceJobId(string serviceJobId, AddAppointmentRequest body)
        {
            ApiResponse<SetAppointmentResponse> localVarResponse = AddAppointmentForServiceJobByServiceJobIdWithHttpInfo(serviceJobId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>ApiResponse of SetAppointmentResponse</returns>
        public ApiResponse<SetAppointmentResponse> AddAppointmentForServiceJobByServiceJobIdWithHttpInfo(string serviceJobId, AddAppointmentRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->AddAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->AddAppointmentForServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAppointmentForServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetAppointmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetAppointmentResponse)));
        }

        /// <summary>
        ///  Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>Task of SetAppointmentResponse</returns>
        public async System.Threading.Tasks.Task<SetAppointmentResponse> AddAppointmentForServiceJobByServiceJobIdAsync(string serviceJobId, AddAppointmentRequest body)
        {
            ApiResponse<SetAppointmentResponse> localVarResponse = await AddAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo(serviceJobId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="body">Add appointment operation input details.</param>
        /// <returns>Task of ApiResponse (SetAppointmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetAppointmentResponse>> AddAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo(string serviceJobId, AddAppointmentRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->AddAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->AddAppointmentForServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAppointmentForServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetAppointmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetAppointmentResponse)));
        }

        /// <summary>
        ///  Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>CancelServiceJobByServiceJobIdResponse</returns>
        public CancelServiceJobByServiceJobIdResponse CancelServiceJobByServiceJobId(string serviceJobId, string cancellationReasonCode)
        {
            ApiResponse<CancelServiceJobByServiceJobIdResponse> localVarResponse = CancelServiceJobByServiceJobIdWithHttpInfo(serviceJobId, cancellationReasonCode);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>ApiResponse of CancelServiceJobByServiceJobIdResponse</returns>
        public ApiResponse<CancelServiceJobByServiceJobIdResponse> CancelServiceJobByServiceJobIdWithHttpInfo(string serviceJobId, string cancellationReasonCode)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->CancelServiceJobByServiceJobId");
            // verify the required parameter 'cancellationReasonCode' is set
            if (cancellationReasonCode == null)
                throw new ApiException(400, "Missing required parameter 'cancellationReasonCode' when calling ServiceApi->CancelServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/cancellations";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (cancellationReasonCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cancellationReasonCode", cancellationReasonCode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelServiceJobByServiceJobIdResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>Task of CancelServiceJobByServiceJobIdResponse</returns>
        public async System.Threading.Tasks.Task<CancelServiceJobByServiceJobIdResponse> CancelServiceJobByServiceJobIdAsync(string serviceJobId, string cancellationReasonCode)
        {
            ApiResponse<CancelServiceJobByServiceJobIdResponse> localVarResponse = await CancelServiceJobByServiceJobIdAsyncWithHttpInfo(serviceJobId, cancellationReasonCode);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="cancellationReasonCode">A cancel reason code that specifies the reason for cancelling a service job.</param>
        /// <returns>Task of ApiResponse (CancelServiceJobByServiceJobIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelServiceJobByServiceJobIdResponse>> CancelServiceJobByServiceJobIdAsyncWithHttpInfo(string serviceJobId, string cancellationReasonCode)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->CancelServiceJobByServiceJobId");
            // verify the required parameter 'cancellationReasonCode' is set
            if (cancellationReasonCode == null)
                throw new ApiException(400, "Missing required parameter 'cancellationReasonCode' when calling ServiceApi->CancelServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/cancellations";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (cancellationReasonCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cancellationReasonCode", cancellationReasonCode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelServiceJobByServiceJobIdResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>CompleteServiceJobByServiceJobIdResponse</returns>
        public CompleteServiceJobByServiceJobIdResponse CompleteServiceJobByServiceJobId(string serviceJobId)
        {
            ApiResponse<CompleteServiceJobByServiceJobIdResponse> localVarResponse = CompleteServiceJobByServiceJobIdWithHttpInfo(serviceJobId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>ApiResponse of CompleteServiceJobByServiceJobIdResponse</returns>
        public ApiResponse<CompleteServiceJobByServiceJobIdResponse> CompleteServiceJobByServiceJobIdWithHttpInfo(string serviceJobId)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->CompleteServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/completions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompleteServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompleteServiceJobByServiceJobIdResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompleteServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>Task of CompleteServiceJobByServiceJobIdResponse</returns>
        public async System.Threading.Tasks.Task<CompleteServiceJobByServiceJobIdResponse> CompleteServiceJobByServiceJobIdAsync(string serviceJobId)
        {
            ApiResponse<CompleteServiceJobByServiceJobIdResponse> localVarResponse = await CompleteServiceJobByServiceJobIdAsyncWithHttpInfo(serviceJobId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <returns>Task of ApiResponse (CompleteServiceJobByServiceJobIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompleteServiceJobByServiceJobIdResponse>> CompleteServiceJobByServiceJobIdAsyncWithHttpInfo(string serviceJobId)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->CompleteServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/completions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompleteServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompleteServiceJobByServiceJobIdResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompleteServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>GetServiceJobByServiceJobIdResponse</returns>
        public GetServiceJobByServiceJobIdResponse GetServiceJobByServiceJobId(string serviceJobId)
        {
            ApiResponse<GetServiceJobByServiceJobIdResponse> localVarResponse = GetServiceJobByServiceJobIdWithHttpInfo(serviceJobId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>ApiResponse of GetServiceJobByServiceJobIdResponse</returns>
        public ApiResponse<GetServiceJobByServiceJobIdResponse> GetServiceJobByServiceJobIdWithHttpInfo(string serviceJobId)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->GetServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetServiceJobByServiceJobIdResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>Task of GetServiceJobByServiceJobIdResponse</returns>
        public async System.Threading.Tasks.Task<GetServiceJobByServiceJobIdResponse> GetServiceJobByServiceJobIdAsync(string serviceJobId)
        {
            ApiResponse<GetServiceJobByServiceJobIdResponse> localVarResponse = await GetServiceJobByServiceJobIdAsyncWithHttpInfo(serviceJobId);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">A service job identifier.</param>
        /// <returns>Task of ApiResponse (GetServiceJobByServiceJobIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetServiceJobByServiceJobIdResponse>> GetServiceJobByServiceJobIdAsyncWithHttpInfo(string serviceJobId)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->GetServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceJobByServiceJobIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetServiceJobByServiceJobIdResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceJobByServiceJobIdResponse)));
        }

        /// <summary>
        ///  Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces. </param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20.  (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.  (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">sort order for the query you want to perform.  (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <returns>GetServiceJobsResponse</returns>
        public GetServiceJobsResponse GetServiceJobs(List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null)
        {
            ApiResponse<GetServiceJobsResponse> localVarResponse = GetServiceJobsWithHttpInfo(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces. </param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20.  (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.  (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">sort order for the query you want to perform.  (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <returns>ApiResponse of GetServiceJobsResponse</returns>
        public ApiResponse<GetServiceJobsResponse> GetServiceJobsWithHttpInfo(List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null)
        {
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetServiceJobs");

            var localVarPath = "/service/v1/serviceJobs";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "serviceOrderIds", serviceOrderIds)); // query parameter
            if (serviceJobStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "serviceJobStatus", serviceJobStatus)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (scheduleStartDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduleStartDate", scheduleStartDate)); // query parameter
            if (scheduleEndDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduleEndDate", scheduleEndDate)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceJobsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetServiceJobsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceJobsResponse)));
        }

        /// <summary>
        ///  Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces. </param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20.  (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.  (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">sort order for the query you want to perform.  (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <returns>Task of GetServiceJobsResponse</returns>
        public async System.Threading.Tasks.Task<GetServiceJobsResponse> GetServiceJobsAsync(List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null)
        {
            ApiResponse<GetServiceJobsResponse> localVarResponse = await GetServiceJobsAsyncWithHttpInfo(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">Used to select jobs that were placed in the specified marketplaces. </param>
        /// <param name="serviceOrderIds">List of service order ids for the query you want to perform.Max values supported 20.  (optional)</param>
        /// <param name="serviceJobStatus">A list of one or more job status by which to filter the list of jobs. (optional)</param>
        /// <param name="pageToken">String returned in the response of your previous request. (optional)</param>
        /// <param name="pageSize">A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.  (optional, default to 20)</param>
        /// <param name="sortField">Sort fields on which you want to sort the output. (optional)</param>
        /// <param name="sortOrder">sort order for the query you want to perform.  (optional)</param>
        /// <param name="createdAfter">A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="createdBefore">A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error.  (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format.  (optional)</param>
        /// <param name="scheduleStartDate">A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <param name="scheduleEndDate">A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date.  (optional)</param>
        /// <returns>Task of ApiResponse (GetServiceJobsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetServiceJobsResponse>> GetServiceJobsAsyncWithHttpInfo(List<string> marketplaceIds, List<string> serviceOrderIds = null, List<string> serviceJobStatus = null, string pageToken = null, int? pageSize = null, string sortField = null, string sortOrder = null, string createdAfter = null, string createdBefore = null, string lastUpdatedAfter = null, string lastUpdatedBefore = null, string scheduleStartDate = null, string scheduleEndDate = null)
        {
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling ServiceApi->GetServiceJobs");

            var localVarPath = "/service/v1/serviceJobs";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "serviceOrderIds", serviceOrderIds)); // query parameter
            if (serviceJobStatus != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "serviceJobStatus", serviceJobStatus)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (scheduleStartDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduleStartDate", scheduleStartDate)); // query parameter
            if (scheduleEndDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduleEndDate", scheduleEndDate)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceJobsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetServiceJobsResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceJobsResponse)));
        }

        /// <summary>
        ///  Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>SetAppointmentResponse</returns>
        public SetAppointmentResponse RescheduleAppointmentForServiceJobByServiceJobId(string serviceJobId, string appointmentId, RescheduleAppointmentRequest body)
        {
            ApiResponse<SetAppointmentResponse> localVarResponse = RescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(serviceJobId, appointmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>ApiResponse of SetAppointmentResponse</returns>
        public ApiResponse<SetAppointmentResponse> RescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(string serviceJobId, string appointmentId, RescheduleAppointmentRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RescheduleAppointmentForServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetAppointmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetAppointmentResponse)));
        }

        /// <summary>
        ///  Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>Task of SetAppointmentResponse</returns>
        public async System.Threading.Tasks.Task<SetAppointmentResponse> RescheduleAppointmentForServiceJobByServiceJobIdAsync(string serviceJobId, string appointmentId, RescheduleAppointmentRequest body)
        {
            ApiResponse<SetAppointmentResponse> localVarResponse = await RescheduleAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo(serviceJobId, appointmentId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceJobId">An Amazon defined service job identifier.</param>
        /// <param name="appointmentId">An existing appointment identifier for the Service Job.</param>
        /// <param name="body">Reschedule appointment operation input details.</param>
        /// <returns>Task of ApiResponse (SetAppointmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetAppointmentResponse>> RescheduleAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo(string serviceJobId, string appointmentId, RescheduleAppointmentRequest body)
        {
            // verify the required parameter 'serviceJobId' is set
            if (serviceJobId == null)
                throw new ApiException(400, "Missing required parameter 'serviceJobId' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceApi->RescheduleAppointmentForServiceJobByServiceJobId");

            var localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceJobId != null) localVarPathParams.Add("serviceJobId", Configuration.ApiClient.ParameterToString(serviceJobId)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RescheduleAppointmentForServiceJobByServiceJobId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetAppointmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SetAppointmentResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetAppointmentResponse)));
        }

    }
}
