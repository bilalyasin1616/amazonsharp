/* 
 * Selling Partner API for Authorization
 *
 * The Selling Partner API for Authorization helps developers manage authorizations and check the specific permissions associated with a given authorization.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AmazonSharp.Clients;
using AmazonSharp.Models.Authorization;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace AmazonSharp.Api.Authorization
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
        /// </summary>
        /// <remarks>
        /// With the getAuthorizationCode operation, you can request a Login With Amazon (LWA) authorization code that will allow you to call a Selling Partner API on behalf of a seller who has already authorized you to call Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an MWS auth token, and a seller ID. Taken together, these represent the Amazon MWS authorization that the seller previously granted you. The operation returns an LWA authorization code that can be exchanged for a refresh token and access token representing authorization to call the Selling Partner API on the seller&#39;s behalf. By using this API, sellers who have already authorized you for Amazon MWS do not need to re-authorize you for the Selling Partner API.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellingPartnerId">The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore.</param>
        /// <param name="developerId">Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central.</param>
        /// <param name="mwsAuthToken">The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore.</param>
        /// <returns>GetAuthorizationCodeResponse</returns>
        GetAuthorizationCodeResponse GetAuthorizationCode(string sellingPartnerId, string developerId, string mwsAuthToken);

        /// <summary>
        /// Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
        /// </summary>
        /// <remarks>
        /// With the getAuthorizationCode operation, you can request a Login With Amazon (LWA) authorization code that will allow you to call a Selling Partner API on behalf of a seller who has already authorized you to call Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an MWS auth token, and a seller ID. Taken together, these represent the Amazon MWS authorization that the seller previously granted you. The operation returns an LWA authorization code that can be exchanged for a refresh token and access token representing authorization to call the Selling Partner API on the seller&#39;s behalf. By using this API, sellers who have already authorized you for Amazon MWS do not need to re-authorize you for the Selling Partner API.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellingPartnerId">The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore.</param>
        /// <param name="developerId">Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central.</param>
        /// <param name="mwsAuthToken">The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore.</param>
        /// <returns>ApiResponse of GetAuthorizationCodeResponse</returns>
        ApiResponse<GetAuthorizationCodeResponse> GetAuthorizationCodeWithHttpInfo(string sellingPartnerId, string developerId, string mwsAuthToken);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
        /// </summary>
        /// <remarks>
        /// With the getAuthorizationCode operation, you can request a Login With Amazon (LWA) authorization code that will allow you to call a Selling Partner API on behalf of a seller who has already authorized you to call Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an MWS auth token, and a seller ID. Taken together, these represent the Amazon MWS authorization that the seller previously granted you. The operation returns an LWA authorization code that can be exchanged for a refresh token and access token representing authorization to call the Selling Partner API on the seller&#39;s behalf. By using this API, sellers who have already authorized you for Amazon MWS do not need to re-authorize you for the Selling Partner API.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellingPartnerId">The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore.</param>
        /// <param name="developerId">Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central.</param>
        /// <param name="mwsAuthToken">The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore.</param>
        /// <returns>Task of GetAuthorizationCodeResponse</returns>
        System.Threading.Tasks.Task<GetAuthorizationCodeResponse> GetAuthorizationCodeAsync(string sellingPartnerId, string developerId, string mwsAuthToken);

        /// <summary>
        /// Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
        /// </summary>
        /// <remarks>
        /// With the getAuthorizationCode operation, you can request a Login With Amazon (LWA) authorization code that will allow you to call a Selling Partner API on behalf of a seller who has already authorized you to call Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an MWS auth token, and a seller ID. Taken together, these represent the Amazon MWS authorization that the seller previously granted you. The operation returns an LWA authorization code that can be exchanged for a refresh token and access token representing authorization to call the Selling Partner API on the seller&#39;s behalf. By using this API, sellers who have already authorized you for Amazon MWS do not need to re-authorize you for the Selling Partner API.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellingPartnerId">The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore.</param>
        /// <param name="developerId">Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central.</param>
        /// <param name="mwsAuthToken">The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore.</param>
        /// <returns>Task of ApiResponse (GetAuthorizationCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAuthorizationCodeResponse>> GetAuthorizationCodeAsyncWithHttpInfo(string sellingPartnerId, string developerId, string mwsAuthToken);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthorizationApi : IAuthorizationApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthorizationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization. With the getAuthorizationCode operation, you can request a Login With Amazon (LWA) authorization code that will allow you to call a Selling Partner API on behalf of a seller who has already authorized you to call Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an MWS auth token, and a seller ID. Taken together, these represent the Amazon MWS authorization that the seller previously granted you. The operation returns an LWA authorization code that can be exchanged for a refresh token and access token representing authorization to call the Selling Partner API on the seller&#39;s behalf. By using this API, sellers who have already authorized you for Amazon MWS do not need to re-authorize you for the Selling Partner API.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellingPartnerId">The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore.</param>
        /// <param name="developerId">Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central.</param>
        /// <param name="mwsAuthToken">The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore.</param>
        /// <returns>GetAuthorizationCodeResponse</returns>
        public GetAuthorizationCodeResponse GetAuthorizationCode(string sellingPartnerId, string developerId, string mwsAuthToken)
        {
            ApiResponse<GetAuthorizationCodeResponse> localVarResponse = GetAuthorizationCodeWithHttpInfo(sellingPartnerId, developerId, mwsAuthToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization. With the getAuthorizationCode operation, you can request a Login With Amazon (LWA) authorization code that will allow you to call a Selling Partner API on behalf of a seller who has already authorized you to call Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an MWS auth token, and a seller ID. Taken together, these represent the Amazon MWS authorization that the seller previously granted you. The operation returns an LWA authorization code that can be exchanged for a refresh token and access token representing authorization to call the Selling Partner API on the seller&#39;s behalf. By using this API, sellers who have already authorized you for Amazon MWS do not need to re-authorize you for the Selling Partner API.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellingPartnerId">The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore.</param>
        /// <param name="developerId">Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central.</param>
        /// <param name="mwsAuthToken">The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore.</param>
        /// <returns>ApiResponse of GetAuthorizationCodeResponse</returns>
        public ApiResponse<GetAuthorizationCodeResponse> GetAuthorizationCodeWithHttpInfo(string sellingPartnerId, string developerId, string mwsAuthToken)
        {
            // verify the required parameter 'sellingPartnerId' is set
            if (sellingPartnerId == null)
                throw new ApiException(400, "Missing required parameter 'sellingPartnerId' when calling AuthorizationApi->GetAuthorizationCode");
            // verify the required parameter 'developerId' is set
            if (developerId == null)
                throw new ApiException(400, "Missing required parameter 'developerId' when calling AuthorizationApi->GetAuthorizationCode");
            // verify the required parameter 'mwsAuthToken' is set
            if (mwsAuthToken == null)
                throw new ApiException(400, "Missing required parameter 'mwsAuthToken' when calling AuthorizationApi->GetAuthorizationCode");

            var localVarPath = "/authorization/v1/authorizationCode";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellingPartnerId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sellingPartnerId", sellingPartnerId)); // query parameter
            if (developerId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "developerId", developerId)); // query parameter
            if (mwsAuthToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "mwsAuthToken", mwsAuthToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAuthorizationCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAuthorizationCodeResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAuthorizationCodeResponse)));
        }

        /// <summary>
        /// Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization. With the getAuthorizationCode operation, you can request a Login With Amazon (LWA) authorization code that will allow you to call a Selling Partner API on behalf of a seller who has already authorized you to call Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an MWS auth token, and a seller ID. Taken together, these represent the Amazon MWS authorization that the seller previously granted you. The operation returns an LWA authorization code that can be exchanged for a refresh token and access token representing authorization to call the Selling Partner API on the seller&#39;s behalf. By using this API, sellers who have already authorized you for Amazon MWS do not need to re-authorize you for the Selling Partner API.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellingPartnerId">The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore.</param>
        /// <param name="developerId">Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central.</param>
        /// <param name="mwsAuthToken">The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore.</param>
        /// <returns>Task of GetAuthorizationCodeResponse</returns>
        public async System.Threading.Tasks.Task<GetAuthorizationCodeResponse> GetAuthorizationCodeAsync(string sellingPartnerId, string developerId, string mwsAuthToken)
        {
            ApiResponse<GetAuthorizationCodeResponse> localVarResponse = await GetAuthorizationCodeAsyncWithHttpInfo(sellingPartnerId, developerId, mwsAuthToken);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization. With the getAuthorizationCode operation, you can request a Login With Amazon (LWA) authorization code that will allow you to call a Selling Partner API on behalf of a seller who has already authorized you to call Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an MWS auth token, and a seller ID. Taken together, these represent the Amazon MWS authorization that the seller previously granted you. The operation returns an LWA authorization code that can be exchanged for a refresh token and access token representing authorization to call the Selling Partner API on the seller&#39;s behalf. By using this API, sellers who have already authorized you for Amazon MWS do not need to re-authorize you for the Selling Partner API.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellingPartnerId">The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore.</param>
        /// <param name="developerId">Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central.</param>
        /// <param name="mwsAuthToken">The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore.</param>
        /// <returns>Task of ApiResponse (GetAuthorizationCodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAuthorizationCodeResponse>> GetAuthorizationCodeAsyncWithHttpInfo(string sellingPartnerId, string developerId, string mwsAuthToken)
        {
            // verify the required parameter 'sellingPartnerId' is set
            if (sellingPartnerId == null)
                throw new ApiException(400, "Missing required parameter 'sellingPartnerId' when calling AuthorizationApi->GetAuthorizationCode");
            // verify the required parameter 'developerId' is set
            if (developerId == null)
                throw new ApiException(400, "Missing required parameter 'developerId' when calling AuthorizationApi->GetAuthorizationCode");
            // verify the required parameter 'mwsAuthToken' is set
            if (mwsAuthToken == null)
                throw new ApiException(400, "Missing required parameter 'mwsAuthToken' when calling AuthorizationApi->GetAuthorizationCode");

            var localVarPath = "/authorization/v1/authorizationCode";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellingPartnerId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sellingPartnerId", sellingPartnerId)); // query parameter
            if (developerId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "developerId", developerId)); // query parameter
            if (mwsAuthToken != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "mwsAuthToken", mwsAuthToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAuthorizationCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAuthorizationCodeResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAuthorizationCodeResponse)));
        }

    }
}
